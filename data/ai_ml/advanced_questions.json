{
    "questions": [
        {
            "id": "adv_1",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast Python 2 and Python 3?",
            "expected_keywords": [
                "backward",
                "removal",
                "returning",
                "longer",
                "life",
                "maintained",
                "many",
                "no",
                "being",
                "float",
                "compatible",
                "two",
                "style",
                "classes",
                "old",
                "python",
                "introduced",
                "programming",
                "its",
                "function",
                "print",
                "such",
                "language",
                "versions",
                "division",
                "end",
                "major",
                "released",
                "january",
                "integer",
                "reached",
                "changes"
            ]
        },
        {
            "id": "adv_2",
            "category": "python",
            "difficulty": "advanced",
            "question": "which of the following codes will throw an error? Justify your answer.\n \t\t\t\tlist1 = [1, 2, 3]\n \t\t\t\tlist2 = list1\n \t\t\t\tlist2[0] = 4\n \t\t\t\tprint(list1)",
            "expected_keywords": [
                "affect",
                "variables",
                "when",
                "changed",
                "throw",
                "objects",
                "reflected",
                "mutable",
                "made",
                "same",
                "python",
                "code",
                "one",
                "object",
                "memory",
                "refer",
                "so",
                "change",
                "error",
                "because",
                "list",
                "all",
                "lists",
                "well",
                "both",
                "changes"
            ]
        },
        {
            "id": "adv_3",
            "category": "python",
            "difficulty": "advanced",
            "question": "Open a text file real all write 'Python is a good language', 'everyone should learn python','Python is the third most used programming language in the world', in separate lines then read the files and remove all the stopwords from it edit the file and close it.",
            "expected_keywords": [
                "everyone",
                "txt",
                "replace",
                "text",
                "good",
                "close",
                "read",
                "learn",
                "python",
                "stopwords",
                "open",
                "write",
                "programming",
                "file",
                "world",
                "r",
                "most",
                "word",
                "language",
                "third",
                "used",
                "n"
            ]
        },
        {
            "id": "adv_4",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast a shallow copy and a deep copy in Python?",
            "expected_keywords": [
                "instances",
                "references",
                "objects",
                "new",
                "deepcopy",
                "creating",
                "deep",
                "python",
                "object",
                "entirely",
                "inserts",
                "provides",
                "function",
                "all",
                "shallow",
                "creates",
                "recursively",
                "module",
                "copy",
                "but",
                "original",
                "found",
                "copies"
            ]
        },
        {
            "id": "adv_5",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast a module and a package in Python?",
            "expected_keywords": [
                "variables",
                "containing",
                "statement",
                "import",
                "allow",
                "imported",
                "classes",
                "using",
                "python",
                "hierarchical",
                "code",
                "functions",
                "packages",
                "one",
                "single",
                "file",
                "tells",
                "modules",
                "package",
                "directory",
                "module",
                "organization",
                "defines",
                "py",
                "more"
            ]
        },
        {
            "id": "adv_6",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the __name__ variable in Python?",
            "expected_keywords": [
                "reusable",
                "automatically",
                "when",
                "script",
                "imported",
                "directly",
                "allows",
                "string",
                "python",
                "code",
                "special",
                "set",
                "variable",
                "providing",
                "run",
                "name",
                "separate",
                "way",
                "module",
                "both",
                "meant"
            ]
        },
        {
            "id": "adv_7",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the pass statement in Python?",
            "expected_keywords": [
                "required",
                "does",
                "statement",
                "when",
                "needed",
                "often",
                "no",
                "pass",
                "operation",
                "null",
                "placeholder",
                "python",
                "syntactically",
                "class",
                "function",
                "definition",
                "example",
                "action",
                "but",
                "empty",
                "nothing",
                "used"
            ]
        },
        {
            "id": "adv_8",
            "category": "python",
            "difficulty": "advanced",
            "question": "How is Multithreading achieved in Python?",
            "expected_keywords": [
                "space",
                "concurrently",
                "threading",
                "does",
                "when",
                "each",
                "runs",
                "threads",
                "achieved",
                "bound",
                "executing",
                "same",
                "multiple",
                "lock",
                "they",
                "o",
                "global",
                "using",
                "python",
                "prevent",
                "multithreading",
                "running",
                "tasks",
                "memory",
                "its",
                "provides",
                "share",
                "thread",
                "bytecode",
                "run",
                "prevents",
                "way",
                "gil",
                "i",
                "s",
                "module",
                "own",
                "time",
                "but",
                "interpreter",
                "performing"
            ]
        },
        {
            "id": "adv_9",
            "category": "python",
            "difficulty": "advanced",
            "question": "Discuss advantage that the NumPy arrays have over a Nested list?",
            "expected_keywords": [
                "nested",
                "provide",
                "several",
                "vectorized",
                "arrays",
                "manipulation",
                "more",
                "iterating",
                "reasons",
                "applied",
                "they",
                "once",
                "allows",
                "individual",
                "operations",
                "numpy",
                "efficient",
                "rather",
                "functions",
                "memory",
                "faster",
                "working",
                "access",
                "range",
                "lists",
                "also",
                "elements",
                "wide",
                "mathematical",
                "methods",
                "than",
                "support",
                "entire",
                "stored",
                "contiguous"
            ]
        },
        {
            "id": "adv_10",
            "category": "python",
            "difficulty": "advanced",
            "question": "Discuss is the use of the 'yield' keyword in Python?",
            "expected_keywords": [
                "sequences",
                "storing",
                "when",
                "yield",
                "generating",
                "create",
                "generator",
                "returns",
                "loop",
                "value",
                "iterated",
                "once",
                "them",
                "called",
                "python",
                "generators",
                "passed",
                "one",
                "object",
                "memory",
                "values",
                "function",
                "all",
                "without",
                "keyword",
                "iterator",
                "large",
                "useful",
                "retrieve",
                "time",
                "next",
                "used"
            ]
        },
        {
            "id": "adv_11",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast a list and a tuple in Python?",
            "expected_keywords": [
                "sequence",
                "after",
                "immutable",
                "brackets",
                "created",
                "mutable",
                "similar",
                "fixed",
                "using",
                "square",
                "collections",
                "cannot",
                "modified",
                "items",
                "change",
                "list",
                "parentheses",
                "typically",
                "lists",
                "elements",
                "creation",
                "tuples",
                "tuple",
                "time",
                "used",
                "while"
            ]
        },
        {
            "id": "adv_12",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'with' statement in Python?",
            "expected_keywords": [
                "automatically",
                "statement",
                "when",
                "enter",
                "longer",
                "needed",
                "how",
                "cleaned",
                "resources",
                "calls",
                "no",
                "create",
                "runtime",
                "managers",
                "properly",
                "they",
                "python",
                "context",
                "efficient",
                "files",
                "connections",
                "ensure",
                "safe",
                "object",
                "work",
                "easier",
                "making",
                "manager",
                "manage",
                "such",
                "network",
                "methods",
                "exit",
                "manner",
                "defines",
                "used"
            ]
        },
        {
            "id": "adv_13",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast '==' and 'is' in Python?",
            "expected_keywords": [
                "object",
                "value",
                "same",
                "two",
                "memory",
                "equality",
                "identity",
                "values",
                "references",
                "objects",
                "checks",
                "meaning",
                "if",
                "point"
            ]
        },
        {
            "id": "adv_14",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'map()' function in Python?",
            "expected_keywords": [
                "each",
                "map",
                "applies",
                "other",
                "returns",
                "applying",
                "transformation",
                "element",
                "collection",
                "object",
                "items",
                "results",
                "function",
                "iterable",
                "list",
                "input",
                "all",
                "iterator",
                "any",
                "useful",
                "given"
            ]
        },
        {
            "id": "adv_15",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'filter()' function in Python?",
            "expected_keywords": [
                "iterator",
                "returns",
                "condition",
                "elements",
                "function",
                "iterable",
                "true",
                "constructs",
                "filter",
                "based",
                "used",
                "collection"
            ]
        },
        {
            "id": "adv_16",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'reduce()' function in Python?",
            "expected_keywords": [
                "returning",
                "result",
                "applies",
                "value",
                "reduce",
                "binary",
                "some",
                "single",
                "items",
                "right",
                "so",
                "function",
                "iterable",
                "list",
                "left",
                "cumulatively",
                "computation",
                "useful",
                "module",
                "functools",
                "performing"
            ]
        },
        {
            "id": "adv_17",
            "category": "python",
            "difficulty": "advanced",
            "question": "Discuss are Pickling and Unpickling?",
            "expected_keywords": [
                "object",
                "file",
                "byte",
                "network",
                "database",
                "pickling",
                "stream",
                "transmit",
                "back",
                "converting",
                "python",
                "store",
                "inverse",
                "operation",
                "unpickling",
                "process"
            ]
        },
        {
            "id": "adv_18",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'zip()' function in Python?",
            "expected_keywords": [
                "zip",
                "returns",
                "iterables",
                "iterating",
                "multiple",
                "useful",
                "tuple",
                "parallel",
                "function",
                "them",
                "takes",
                "zero",
                "aggregates",
                "more"
            ]
        },
        {
            "id": "adv_19",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'enumerate()' function in Python?",
            "expected_keywords": [
                "each",
                "counter",
                "get",
                "returns",
                "value",
                "enumerate",
                "loops",
                "object",
                "iterable",
                "function",
                "list",
                "adds",
                "used",
                "useful",
                "indexed",
                "both",
                "item",
                "index",
                "obtaining"
            ]
        },
        {
            "id": "adv_20",
            "category": "python",
            "difficulty": "advanced",
            "question": "How is Memory managed in Python?",
            "expected_keywords": [
                "space",
                "containing",
                "make",
                "recycles",
                "objects",
                "private",
                "data",
                "unused",
                "internally",
                "ensured",
                "python",
                "heap",
                "memory",
                "available",
                "garbage",
                "all",
                "manager",
                "involves",
                "structures",
                "built",
                "management",
                "collector"
            ]
        },
        {
            "id": "adv_21",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'assert' statement in Python?",
            "expected_keywords": [
                "optional",
                "raises",
                "errors",
                "catch",
                "statement",
                "condition",
                "message",
                "development",
                "early",
                "assertionerror",
                "diagnose",
                "false",
                "if",
                "purposes",
                "helps",
                "assert",
                "debugging",
                "tests",
                "used",
                "process"
            ]
        },
        {
            "id": "adv_22",
            "category": "python",
            "difficulty": "advanced",
            "question": "Are arguments in Python passed by value or by reference?",
            "expected_keywords": [
                "immutable",
                "arguments",
                "unchanged",
                "reflected",
                "mutable",
                "dictionary",
                "string",
                "python",
                "like",
                "passed",
                "modifications",
                "object",
                "assignment",
                "remains",
                "function",
                "list",
                "if",
                "means",
                "outside",
                "original",
                "integer"
            ]
        },
        {
            "id": "adv_23",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Uses of the \u2018is\u2019 Operator?",
            "expected_keywords": [
                "returns",
                "object",
                "same",
                "memory",
                "two",
                "false",
                "equality",
                "identity",
                "value",
                "different",
                "true",
                "otherwise",
                "references",
                "checks",
                "if",
                "point",
                "operator"
            ]
        },
        {
            "id": "adv_24",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'pass' statement in Python?",
            "expected_keywords": [
                "required",
                "does",
                "statement",
                "when",
                "needed",
                "often",
                "no",
                "pass",
                "operation",
                "null",
                "placeholder",
                "python",
                "syntactically",
                "class",
                "function",
                "definition",
                "example",
                "action",
                "but",
                "empty",
                "nothing",
                "used"
            ]
        },
        {
            "id": "adv_25",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'break' statement in Python?",
            "expected_keywords": [
                "loop",
                "immediately",
                "inside",
                "terminates",
                "control",
                "statement",
                "when",
                "break",
                "encountered",
                "transfers",
                "exit",
                "prematurely",
                "following",
                "used"
            ]
        },
        {
            "id": "adv_26",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'continue' statement in Python?",
            "expected_keywords": [
                "iteration",
                "continue",
                "does",
                "statement",
                "back",
                "loop",
                "skip",
                "rather",
                "code",
                "inside",
                "only",
                "control",
                "beginning",
                "moves",
                "current",
                "but",
                "next",
                "terminate",
                "rest",
                "used"
            ]
        },
        {
            "id": "adv_27",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'global' keyword in Python?",
            "expected_keywords": [
                "keyword",
                "inside",
                "i",
                "its",
                "local",
                "scope",
                "allows",
                "variable",
                "global",
                "function",
                "e",
                "outside",
                "exists",
                "declare",
                "used",
                "modify"
            ]
        },
        {
            "id": "adv_28",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the 'nonlocal' keyword in Python?",
            "expected_keywords": [
                "nested",
                "keyword",
                "inside",
                "nearest",
                "local",
                "scope",
                "allows",
                "variable",
                "nonlocal",
                "function",
                "global",
                "enclosing",
                "declare",
                "used",
                "modify"
            ]
        },
        {
            "id": "adv_29",
            "category": "python",
            "difficulty": "advanced",
            "question": "How will you check if all the Characters in a String are alphanumeric?",
            "expected_keywords": [
                "one",
                "returns",
                "there",
                "alphanumeric",
                "characters",
                "false",
                "use",
                "check",
                "string",
                "you",
                "method",
                "isalnum",
                "true",
                "otherwise",
                "least",
                "all",
                "if",
                "character"
            ]
        },
        {
            "id": "adv_30",
            "category": "python",
            "difficulty": "advanced",
            "question": "Discuss Django architecture.",
            "expected_keywords": [
                "structure",
                "html",
                "data",
                "separation",
                "rendering",
                "business",
                "view",
                "user",
                "promotes",
                "template",
                "represents",
                "concerns",
                "follows",
                "easier",
                "scale",
                "handles",
                "making",
                "responsible",
                "manage",
                "model",
                "carry",
                "application",
                "architecture",
                "mvt",
                "django",
                "interacts",
                "logic"
            ]
        },
        {
            "id": "adv_31",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you display the contents of a text file in reverse order?",
            "expected_keywords": [
                "you",
                "txt",
                "text",
                "read",
                "readlines",
                "line",
                "python",
                "strip",
                "open",
                "order",
                "file",
                "contents",
                "display",
                "then",
                "reversed",
                "example",
                "r",
                "list",
                "print",
                "lines",
                "reverse"
            ]
        },
        {
            "id": "adv_32",
            "category": "python",
            "difficulty": "advanced",
            "question": "Discuss is scope in python?",
            "expected_keywords": [
                "variables",
                "names",
                "level",
                "script",
                "accessible",
                "where",
                "global",
                "defined",
                "python",
                "code",
                "region",
                "enclosing",
                "functions",
                "four",
                "there",
                "special",
                "local",
                "variable",
                "function",
                "top",
                "built",
                "scope",
                "module",
                "reserved",
                "types",
                "refers",
                "within"
            ]
        },
        {
            "id": "adv_33",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast a list and a dictionary in Python?",
            "expected_keywords": [
                "accessed",
                "brackets",
                "created",
                "curly",
                "value",
                "dictionary",
                "braces",
                "using",
                "square",
                "keys",
                "collections",
                "key",
                "associating",
                "collection",
                "ordered",
                "pairs",
                "items",
                "values",
                "unordered",
                "list",
                "dictionaries",
                "typically",
                "lists",
                "used",
                "elements",
                "their",
                "index",
                "while"
            ]
        },
        {
            "id": "adv_34",
            "category": "python",
            "difficulty": "advanced",
            "question": "Discuss is the output of the below code? Justify your answer.\n \t\t\t\tdef addToList(val, list=[]):\n \t\t\t\t\tlist.append(val)\n \t\t\t\t\treturn list\n \t\t\t\tlist1 = addToList(1)\n \t\t\t\tlist2 = addToList(123,[])\n \t\t\t\tlist3 = addToList('a')\n \t\t\t\tprint(\"list1 = %s\" % list1)\n \t\t\t\tprint(\"list2 = %s\" % list2)\n \t\t\t\tprint(\"list3 = %s\" % list3)",
            "expected_keywords": []
        },
        {
            "id": "adv_35",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you use Print() without the newline?, imagine a scenario where you have to print the output of a loop in the same line.",
            "expected_keywords": [
                "parameter",
                "output",
                "use",
                "you",
                "being",
                "character",
                "loop",
                "same",
                "string",
                "line",
                "python",
                "prevent",
                "default",
                "printed",
                "set",
                "function",
                "newline",
                "change",
                "added",
                "example",
                "print",
                "range",
                "without",
                "adds",
                "i",
                "end",
                "empty",
                "n"
            ]
        },
        {
            "id": "adv_36",
            "category": "python",
            "difficulty": "advanced",
            "question": "Is Python object-oriented or functional programming? Justify your reasoning.",
            "expected_keywords": [
                "features",
                "objects",
                "arguments",
                "map",
                "inheritance",
                "higher",
                "classes",
                "allows",
                "polymorphism",
                "python",
                "filter",
                "reduce",
                "like",
                "functions",
                "supports",
                "order",
                "passed",
                "programming",
                "object",
                "paradigms",
                "functional",
                "oriented",
                "because",
                "encapsulation",
                "also",
                "creation",
                "both"
            ]
        },
        {
            "id": "adv_37",
            "category": "python",
            "difficulty": "advanced",
            "question": "Write a function prototype that takes a variable number of arguments.",
            "expected_keywords": [
                "keyword",
                "def",
                "prototype",
                "positional",
                "number",
                "kwargs",
                "variable",
                "function",
                "takes",
                "arguments",
                "using",
                "example",
                "python",
                "args",
                "pass",
                "written"
            ]
        },
        {
            "id": "adv_38",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are *args and **kwargs?",
            "expected_keywords": [
                "definitions",
                "keyword",
                "used",
                "number",
                "kwargs",
                "allows",
                "variable",
                "function",
                "you",
                "arguments",
                "args",
                "pass",
                "while",
                "positional"
            ]
        },
        {
            "id": "adv_39",
            "category": "python",
            "difficulty": "advanced",
            "question": "In Python, functions are first-class objects. What do you infer from this?",
            "expected_keywords": [
                "variables",
                "greater",
                "objects",
                "arguments",
                "other",
                "they",
                "allows",
                "returned",
                "python",
                "modularity",
                "functions",
                "class",
                "passed",
                "programming",
                "values",
                "first",
                "flexibility",
                "means",
                "assigned"
            ]
        },
        {
            "id": "adv_40",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the output of: print(__name__)? Justify your answer.",
            "expected_keywords": [
                "directly",
                "output",
                "run",
                "name",
                "module",
                "set",
                "how",
                "depends",
                "print",
                "if",
                "script",
                "executed",
                "imported"
            ]
        },
        {
            "id": "adv_41",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast matrices and arrays.",
            "expected_keywords": [
                "provide",
                "whereas",
                "strictly",
                "arrays",
                "flexible",
                "array",
                "multi",
                "linear",
                "operations",
                "numpy",
                "dimensional",
                "specialized",
                "algebra",
                "convenience",
                "general",
                "matrices",
                "matrix",
                "any",
                "dimension",
                "used",
                "while",
                "more"
            ]
        },
        {
            "id": "adv_42",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you get indices of n maximum values in a NumPy array?",
            "expected_keywords": [
                "array",
                "argsort",
                "maximum",
                "values",
                "function",
                "you",
                "import",
                "using",
                "arr",
                "example",
                "python",
                "np",
                "print",
                "numpy",
                "indices",
                "n",
                "get"
            ]
        },
        {
            "id": "adv_43",
            "category": "python",
            "difficulty": "advanced",
            "question": "How would you obtain the res_set from the train_set and the test_set from below?",
            "expected_keywords": [
                "concatenate",
                "use",
                "axis",
                "you",
                "obtain",
                "python",
                "following",
                "code",
                "np"
            ]
        },
        {
            "id": "adv_44",
            "category": "python",
            "difficulty": "advanced",
            "question": "You have uploaded the dataset in CSV format on Google Spreadsheet and shared it publicly. How can you access this in Python?",
            "expected_keywords": [
                "csv",
                "export",
                "spreadsheet",
                "pd",
                "import",
                "url",
                "you",
                "df",
                "spreadsheets",
                "google",
                "using",
                "python",
                "library",
                "format",
                "dataset",
                "d",
                "example",
                "access",
                "com",
                "pandas",
                "https",
                "docs"
            ]
        },
        {
            "id": "adv_45",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast the two data series given below.",
            "expected_keywords": [
                "pd",
                "two",
                "contrast",
                "use",
                "comparison",
                "import",
                "series",
                "you",
                "print",
                "example",
                "python",
                "pandas",
                "data",
                "compare",
                "library"
            ]
        },
        {
            "id": "adv_46",
            "category": "python",
            "difficulty": "advanced",
            "question": "You get the error \u201ctemp.csv\u201d while trying to read a file using pandas. Which of the following could correct it?",
            "expected_keywords": [
                "csv",
                "file",
                "pd",
                "temp",
                "correct",
                "path",
                "import",
                "df",
                "error",
                "trying",
                "using",
                "example",
                "pandas",
                "exists",
                "python",
                "ensure",
                "while",
                "read"
            ]
        },
        {
            "id": "adv_47",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How do you set a line width in the plot given below?",
            "expected_keywords": [
                "parameter",
                "x",
                "show",
                "use",
                "plot",
                "pyplot",
                "set",
                "function",
                "you",
                "line",
                "import",
                "example",
                "python",
                "width",
                "y",
                "linewidth",
                "matplotlib",
                "plt"
            ]
        },
        {
            "id": "adv_48",
            "category": "python",
            "difficulty": "advanced",
            "question": "How would you reset the index of a DataFrame to a given list? Choose the correct option.",
            "expected_keywords": [
                "inplace",
                "use",
                "reset",
                "true",
                "you",
                "method",
                "df",
                "example",
                "given",
                "python",
                "list",
                "dataframe",
                "index"
            ]
        },
        {
            "id": "adv_49",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast range() and xrange() functions in Python.",
            "expected_keywords": [
                "returns",
                "object",
                "xrange",
                "memory",
                "demand",
                "numbers",
                "returning",
                "removed",
                "behaves",
                "like",
                "python",
                "list",
                "generates",
                "efficient",
                "range",
                "while",
                "more"
            ]
        },
        {
            "id": "adv_50",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you check whether a pandas DataFrame is empty or not?",
            "expected_keywords": [
                "pd",
                "check",
                "import",
                "you",
                "df",
                "using",
                "print",
                "example",
                "python",
                "pandas",
                "attribute",
                "empty",
                "dataframe",
                "whether"
            ]
        },
        {
            "id": "adv_51",
            "category": "python",
            "difficulty": "advanced",
            "question": "Write a code to sort an array in NumPy by the (N-1)th column.",
            "expected_keywords": [
                "column",
                "array",
                "argsort",
                "use",
                "import",
                "function",
                "you",
                "sort",
                "arr",
                "print",
                "example",
                "th",
                "python",
                "numpy",
                "n",
                "np"
            ]
        },
        {
            "id": "adv_52",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you create a series from a list, NumPy array, and dictionary?",
            "expected_keywords": [
                "array",
                "pd",
                "b",
                "dictionary",
                "import",
                "series",
                "you",
                "using",
                "example",
                "python",
                "pandas",
                "list",
                "numpy",
                "c",
                "create",
                "library",
                "np"
            ]
        },
        {
            "id": "adv_53",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How do you get the items not common to both series A and series B?",
            "expected_keywords": [
                "pd",
                "items",
                "b",
                "use",
                "import",
                "series",
                "you",
                "method",
                "set",
                "common",
                "example",
                "both",
                "python",
                "pandas",
                "result",
                "list",
                "print",
                "get"
            ]
        },
        {
            "id": "adv_54",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you keep only the top two most frequent values as it is and replace everything else as \u2018other\u2019 in a series?",
            "expected_keywords": [
                "pd",
                "use",
                "import",
                "you",
                "method",
                "replace",
                "nlargest",
                "other",
                "isin",
                "else",
                "where",
                "two",
                "series",
                "python",
                "keep",
                "only",
                "values",
                "example",
                "most",
                "print",
                "top",
                "everything",
                "frequent",
                "pandas",
                "index"
            ]
        },
        {
            "id": "adv_55",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you find the positions of numbers that are multiples of three from a series?",
            "expected_keywords": [
                "find",
                "positions",
                "condition",
                "three",
                "pd",
                "use",
                "numbers",
                "import",
                "series",
                "you",
                "boolean",
                "print",
                "multiples",
                "example",
                "attribute",
                "python",
                "pandas",
                "index"
            ]
        },
        {
            "id": "adv_56",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How do you compute the Euclidean distance between two series?",
            "expected_keywords": [
                "linalg",
                "pd",
                "distance",
                "two",
                "use",
                "import",
                "series",
                "you",
                "euclidean",
                "print",
                "example",
                "python",
                "np",
                "numpy",
                "norm",
                "between",
                "library",
                "compute"
            ]
        },
        {
            "id": "adv_57",
            "category": "python",
            "difficulty": "advanced",
            "question": "If you split your data into train/test splits, is it possible to overfit your model?",
            "expected_keywords": [
                "when",
                "occurs",
                "yes",
                "your",
                "you",
                "new",
                "split",
                "data",
                "test",
                "performance",
                "mitigate",
                "help",
                "possible",
                "noise",
                "cross",
                "proper",
                "splits",
                "impacts",
                "validation",
                "overfit",
                "its",
                "negatively",
                "unseen",
                "overfitting",
                "regularization",
                "outliers",
                "techniques",
                "train",
                "even",
                "if",
                "training",
                "learns",
                "model",
                "including",
                "too",
                "methods",
                "well"
            ]
        },
        {
            "id": "adv_58",
            "category": "python",
            "difficulty": "advanced",
            "question": "Which Python library is built on top of matplotlib and pandas to ease data plotting?",
            "expected_keywords": [
                "statistical",
                "ease",
                "attractive",
                "seaborn",
                "level",
                "data",
                "python",
                "interface",
                "drawing",
                "library",
                "provides",
                "top",
                "graphics",
                "high",
                "informative",
                "built",
                "pandas",
                "plotting",
                "matplotlib"
            ]
        },
        {
            "id": "adv_59",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are the essential features of Python?",
            "expected_keywords": [
                "typing",
                "features",
                "essential",
                "automatic",
                "community",
                "multiple",
                "readability",
                "python",
                "library",
                "programming",
                "object",
                "procedural",
                "memory",
                "its",
                "paradigms",
                "functional",
                "oriented",
                "standard",
                "simplicity",
                "extensive",
                "dynamic",
                "active",
                "large",
                "management",
                "support",
                "include"
            ]
        },
        {
            "id": "adv_60",
            "category": "python",
            "difficulty": "advanced",
            "question": "What type of language is Python?",
            "expected_keywords": [
                "object",
                "high",
                "purpose",
                "language",
                "including",
                "procedural",
                "multiple",
                "paradigms",
                "functional",
                "general",
                "interpreted",
                "oriented",
                "python",
                "level",
                "supports",
                "programming"
            ]
        },
        {
            "id": "adv_61",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain how Python is an interpreted language.",
            "expected_keywords": [
                "beforehand",
                "result",
                "compiled",
                "being",
                "runtime",
                "compared",
                "allows",
                "line",
                "python",
                "slower",
                "rather",
                "code",
                "executed",
                "execution",
                "its",
                "easier",
                "because",
                "interpreted",
                "language",
                "flexibility",
                "languages",
                "machine",
                "than",
                "but",
                "debugging",
                "interpreter",
                "more"
            ]
        },
        {
            "id": "adv_62",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is PEP 8?",
            "expected_keywords": [
                "enhancement",
                "practices",
                "guidelines",
                "pep",
                "proposal",
                "naming",
                "layout",
                "covers",
                "python",
                "code",
                "programming",
                "provides",
                "recommendations",
                "topics",
                "such",
                "writing",
                "best",
                "conventions",
                "readable",
                "clean"
            ]
        },
        {
            "id": "adv_63",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain Python namespace.",
            "expected_keywords": [
                "names",
                "objects",
                "conflicts",
                "holds",
                "naming",
                "global",
                "python",
                "container",
                "ensure",
                "corresponding",
                "identifiers",
                "unique",
                "avoid",
                "local",
                "set",
                "examples",
                "namespaces",
                "namespace",
                "built",
                "scope",
                "their",
                "used",
                "within",
                "include"
            ]
        },
        {
            "id": "adv_64",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are decorators in Python?",
            "expected_keywords": [
                "new",
                "extend",
                "argument",
                "they",
                "implemented",
                "python",
                "code",
                "functions",
                "another",
                "modifications",
                "take",
                "decorators",
                "function",
                "desired",
                "without",
                "changing",
                "way",
                "return",
                "behavior",
                "methods",
                "their",
                "actual",
                "modify"
            ]
        },
        {
            "id": "adv_65",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you use decorators in Python?",
            "expected_keywords": [
                "define",
                "use",
                "after",
                "you",
                "syntax",
                "func",
                "wrapper",
                "happening",
                "using",
                "called",
                "python",
                "another",
                "decorators",
                "before",
                "function",
                "example",
                "print",
                "decorator",
                "def",
                "something",
                "return",
                "hello",
                "apply"
            ]
        },
        {
            "id": "adv_66",
            "category": "python",
            "difficulty": "advanced",
            "question": "Differentiate between .pyc and .py files.",
            "expected_keywords": [
                "each",
                "compiled",
                "performance",
                "improve",
                "source",
                "python",
                "contain",
                "code",
                "files",
                "executed",
                "recompile",
                "generated",
                "avoiding",
                "bytecode",
                "need",
                "pyc",
                "time",
                "interpreter",
                "py",
                "while"
            ]
        },
        {
            "id": "adv_67",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is slicing in Python?",
            "expected_keywords": [
                "extract",
                "such",
                "step",
                "stop",
                "sequence",
                "slicing",
                "technique",
                "tuple",
                "string",
                "index",
                "specifying",
                "python",
                "start",
                "list",
                "syntax",
                "used",
                "portion"
            ]
        },
        {
            "id": "adv_68",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you use the slicing operator in Python?",
            "expected_keywords": [
                "step",
                "output",
                "stop",
                "use",
                "slicing",
                "specify",
                "you",
                "brackets",
                "square",
                "example",
                "python",
                "start",
                "print",
                "indices",
                "within",
                "operator"
            ]
        },
        {
            "id": "adv_69",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are keywords in Python?",
            "expected_keywords": [
                "import",
                "names",
                "words",
                "else",
                "python",
                "identifiers",
                "class",
                "cannot",
                "special",
                "etc",
                "variable",
                "function",
                "if",
                "examples",
                "meanings",
                "def",
                "keywords",
                "return",
                "reserved",
                "used",
                "while",
                "include"
            ]
        },
        {
            "id": "adv_70",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do we combine dataframes in Pandas?",
            "expected_keywords": [
                "rows",
                "you",
                "common",
                "allow",
                "concatenate",
                "columns",
                "join",
                "along",
                "using",
                "functions",
                "dataframes",
                "merge",
                "based",
                "these",
                "combined",
                "such",
                "concat",
                "pandas",
                "alignment",
                "index"
            ]
        },
        {
            "id": "adv_71",
            "category": "python",
            "difficulty": "advanced",
            "question": "In Python, how is memory managed?",
            "expected_keywords": [
                "space",
                "containing",
                "make",
                "recycles",
                "objects",
                "private",
                "data",
                "unused",
                "internally",
                "ensured",
                "python",
                "heap",
                "memory",
                "available",
                "garbage",
                "all",
                "manager",
                "involves",
                "structures",
                "built",
                "management",
                "collector"
            ]
        },
        {
            "id": "adv_72",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain PYTHONPATH.",
            "expected_keywords": [
                "party",
                "when",
                "directories",
                "environment",
                "look",
                "where",
                "importing",
                "path",
                "pythonpath",
                "them",
                "python",
                "search",
                "default",
                "variable",
                "list",
                "modules",
                "used",
                "module",
                "third",
                "interpreter",
                "custom",
                "specifies",
                "add"
            ]
        },
        {
            "id": "adv_73",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain global variables and local variables in Python.",
            "expected_keywords": [
                "variables",
                "within",
                "level",
                "script",
                "accessible",
                "global",
                "defined",
                "inside",
                "only",
                "local",
                "variable",
                "function",
                "top",
                "keyword",
                "module",
                "entire",
                "throughout",
                "used",
                "modify"
            ]
        },
        {
            "id": "adv_74",
            "category": "python",
            "difficulty": "advanced",
            "question": "Is Python case sensitive?",
            "expected_keywords": [
                "yes",
                "names",
                "capitalization",
                "consistent",
                "other",
                "two",
                "python",
                "identifiers",
                "must",
                "considered",
                "myvariable",
                "variable",
                "function",
                "example",
                "sensitive",
                "case",
                "means",
                "used",
                "different"
            ]
        },
        {
            "id": "adv_75",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you install Python on Windows and set path variables?",
            "expected_keywords": [
                "windows",
                "website",
                "installation",
                "after",
                "make",
                "check",
                "verify",
                "you",
                "system",
                "version",
                "during",
                "download",
                "path",
                "install",
                "python",
                "command",
                "sure",
                "option",
                "running",
                "installer",
                "official",
                "opening",
                "run",
                "prompt",
                "configuration",
                "add"
            ]
        },
        {
            "id": "adv_76",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the difference between a for loop and a while loop in Python?",
            "expected_keywords": [
                "sequence",
                "when",
                "objects",
                "other",
                "loop",
                "condition",
                "loops",
                "known",
                "string",
                "python",
                "code",
                "execute",
                "repeatedly",
                "iterate",
                "iterable",
                "true",
                "list",
                "block",
                "specified",
                "such",
                "generally",
                "number",
                "tuple",
                "iterations",
                "long",
                "advance",
                "used",
                "while"
            ]
        },
        {
            "id": "adv_77",
            "category": "python",
            "difficulty": "advanced",
            "question": "On Unix, how do you make a Python script executable?",
            "expected_keywords": [
                "chmod",
                "g",
                "make",
                "you",
                "script",
                "executable",
                "line",
                "using",
                "python",
                "command",
                "bin",
                "file",
                "e",
                "change",
                "permissions",
                "env",
                "shebang",
                "top",
                "need",
                "x",
                "unix",
                "usr",
                "py",
                "add"
            ]
        },
        {
            "id": "adv_78",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the use of self in Python?",
            "expected_keywords": [
                "parameter",
                "attributes",
                "used",
                "refer",
                "s",
                "methods",
                "allows",
                "instance",
                "method",
                "called",
                "python",
                "access",
                "being",
                "self",
                "class",
                "other"
            ]
        },
        {
            "id": "adv_79",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are literals in Python?",
            "expected_keywords": [
                "literals",
                "g",
                "directly",
                "represented",
                "fixed",
                "string",
                "python",
                "code",
                "none",
                "special",
                "world",
                "values",
                "true",
                "e",
                "boolean",
                "false",
                "examples",
                "numeric",
                "hello",
                "include"
            ]
        },
        {
            "id": "adv_80",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are Python modules? Name a few Python built-in modules that are often used.",
            "expected_keywords": [
                "variables",
                "os",
                "containing",
                "json",
                "re",
                "scripts",
                "other",
                "imported",
                "classes",
                "python",
                "commonly",
                "code",
                "functions",
                "files",
                "some",
                "modules",
                "math",
                "datetime",
                "built",
                "sys",
                "used",
                "include"
            ]
        },
        {
            "id": "adv_81",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the use of __init__, and is it a method or a function?",
            "expected_keywords": [
                "special",
                "attributes",
                "when",
                "s",
                "instances",
                "operates",
                "function",
                "instance",
                "method",
                "initialize",
                "called",
                "because",
                "python",
                "defined",
                "within",
                "created",
                "used",
                "class"
            ]
        },
        {
            "id": "adv_82",
            "category": "python",
            "difficulty": "advanced",
            "question": "How is lambda used in Python?",
            "expected_keywords": [
                "output",
                "required",
                "objects",
                "arguments",
                "syntax",
                "create",
                "defined",
                "using",
                "python",
                "y",
                "functions",
                "lambda",
                "wherever",
                "function",
                "example",
                "expression",
                "print",
                "name",
                "without",
                "keyword",
                "x",
                "anonymous",
                "used",
                "add"
            ]
        },
        {
            "id": "adv_83",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do continue, break, and pass work?",
            "expected_keywords": [
                "iteration",
                "continue",
                "required",
                "does",
                "statement",
                "when",
                "break",
                "needed",
                "no",
                "null",
                "operation",
                "pass",
                "loop",
                "nothing",
                "move",
                "placeholder",
                "skip",
                "prematurely",
                "syntactically",
                "code",
                "inside",
                "current",
                "action",
                "but",
                "next",
                "exit",
                "rest",
                "used"
            ]
        },
        {
            "id": "adv_84",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are Python iterators?",
            "expected_keywords": [
                "consists",
                "iterator",
                "iterate",
                "iterators",
                "such",
                "lists",
                "one",
                "tuples",
                "methods",
                "protocol",
                "iterable",
                "time",
                "objects",
                "implement",
                "python",
                "element",
                "used",
                "dictionaries"
            ]
        },
        {
            "id": "adv_85",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the difference between range and xrange?",
            "expected_keywords": [
                "returns",
                "object",
                "xrange",
                "memory",
                "demand",
                "numbers",
                "returning",
                "removed",
                "behaves",
                "like",
                "python",
                "list",
                "generates",
                "efficient",
                "range",
                "while",
                "more"
            ]
        },
        {
            "id": "adv_86",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are the built-in data types in Python?",
            "expected_keywords": [
                "str",
                "bytes",
                "sequence",
                "text",
                "data",
                "float",
                "type",
                "bool",
                "python",
                "binary",
                "dict",
                "complex",
                "memoryview",
                "set",
                "boolean",
                "list",
                "range",
                "frozenset",
                "numeric",
                "int",
                "bytearray",
                "built",
                "tuple",
                "types",
                "mapping",
                "include"
            ]
        },
        {
            "id": "adv_87",
            "category": "python",
            "difficulty": "advanced",
            "question": "Tell me in detail about generators in Python.",
            "expected_keywords": [
                "storing",
                "required",
                "sequence",
                "when",
                "yield",
                "created",
                "generator",
                "value",
                "they",
                "type",
                "using",
                "python",
                "rather",
                "efficient",
                "generators",
                "functions",
                "one",
                "only",
                "memory",
                "items",
                "generate",
                "values",
                "iterable",
                "because",
                "example",
                "print",
                "expressions",
                "fly",
                "keyword",
                "def",
                "produce",
                "time",
                "than",
                "entire"
            ]
        },
        {
            "id": "adv_88",
            "category": "python",
            "difficulty": "advanced",
            "question": "In Python, are arguments provided by value or reference?",
            "expected_keywords": [
                "immutable",
                "arguments",
                "unchanged",
                "reflected",
                "mutable",
                "dictionary",
                "string",
                "python",
                "like",
                "passed",
                "modifications",
                "object",
                "assignment",
                "remains",
                "function",
                "list",
                "if",
                "means",
                "outside",
                "original",
                "integer"
            ]
        },
        {
            "id": "adv_89",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you delete a file in Python?",
            "expected_keywords": [
                "file",
                "os",
                "use",
                "module",
                "delete",
                "function",
                "you",
                "import",
                "example",
                "python",
                "txt",
                "remove"
            ]
        },
        {
            "id": "adv_90",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain join() and split() functions in Python.",
            "expected_keywords": [
                "separator",
                "output",
                "split",
                "result",
                "text",
                "words",
                "delimiter",
                "concatenate",
                "join",
                "string",
                "python",
                "single",
                "world",
                "function",
                "substrings",
                "example",
                "list",
                "print",
                "based",
                "strings",
                "specified",
                "hello",
                "used"
            ]
        },
        {
            "id": "adv_91",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are negative indexes and why are they used?",
            "expected_keywords": [
                "provide",
                "sequence",
                "second",
                "last",
                "string",
                "python",
                "element",
                "index",
                "refers",
                "so",
                "indexes",
                "list",
                "access",
                "negative",
                "convenient",
                "such",
                "way",
                "elements",
                "end",
                "relative",
                "used"
            ]
        },
        {
            "id": "adv_92",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you capitalize the first letter of a string?",
            "expected_keywords": [
                "output",
                "use",
                "world",
                "string",
                "capitalize",
                "you",
                "method",
                "print",
                "example",
                "python",
                "first",
                "letter",
                "text",
                "result",
                "hello"
            ]
        },
        {
            "id": "adv_93",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you convert a string to all lowercase?",
            "expected_keywords": [
                "output",
                "use",
                "world",
                "string",
                "you",
                "method",
                "convert",
                "lower",
                "example",
                "python",
                "print",
                "lowercase",
                "text",
                "result",
                "all",
                "hello"
            ]
        },
        {
            "id": "adv_94",
            "category": "python",
            "difficulty": "advanced",
            "question": "In Python, how do you comment multiple lines?",
            "expected_keywords": [
                "symbol",
                "use",
                "you",
                "alternatively",
                "multiple",
                "multi",
                "they",
                "consecutive",
                "line",
                "using",
                "python",
                "triple",
                "single",
                "comment",
                "technically",
                "true",
                "strings",
                "lines",
                "although",
                "quoted",
                "comments"
            ]
        },
        {
            "id": "adv_95",
            "category": "python",
            "difficulty": "advanced",
            "question": "Is indentation required in Python?",
            "expected_keywords": [
                "required",
                "define",
                "structure",
                "yes",
                "essential",
                "correct",
                "loops",
                "proper",
                "python",
                "code",
                "functions",
                "statements",
                "execution",
                "blocks",
                "indentation",
                "conditional",
                "such",
                "scope",
                "used",
                "within",
                "those"
            ]
        },
        {
            "id": "adv_96",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of \u2018not\u2019, \u2018is\u2019, and \u2018in\u2019 operators.",
            "expected_keywords": [
                "sequence",
                "references",
                "present",
                "same",
                "two",
                "membership",
                "identity",
                "meaning",
                "element",
                "point",
                "collection",
                "object",
                "memory",
                "equality",
                "logical",
                "boolean",
                "checks",
                "expression",
                "if",
                "negates",
                "operator"
            ]
        },
        {
            "id": "adv_97",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are the functions help() and dir() used for in Python?",
            "expected_keywords": [
                "object",
                "properties",
                "including",
                "attributes",
                "documentation",
                "its",
                "built",
                "module",
                "methods",
                "function",
                "display",
                "list",
                "dir",
                "used",
                "class",
                "help"
            ]
        },
        {
            "id": "adv_98",
            "category": "python",
            "difficulty": "advanced",
            "question": "Isn't all the memory de-allocated when Python exits?",
            "expected_keywords": [
                "when",
                "references",
                "objects",
                "referenced",
                "exits",
                "other",
                "allocate",
                "still",
                "global",
                "python",
                "attempts",
                "circular",
                "some",
                "necessarily",
                "there",
                "memory",
                "de",
                "allocated",
                "if",
                "all",
                "however",
                "namespace",
                "structures",
                "persistent",
                "program",
                "used"
            ]
        },
        {
            "id": "adv_99",
            "category": "python",
            "difficulty": "advanced",
            "question": "using numpy write a code to make 2 arrays of equally spaced number inside -5 to 5 and then plot the two arrays using matplotlib. It should be a scatter plot",
            "expected_keywords": [
                "x",
                "show",
                "plt",
                "pyplot",
                "linspace",
                "import",
                "scatter",
                "y",
                "numpy",
                "matplotlib",
                "np"
            ]
        },
        {
            "id": "adv_100",
            "category": "python",
            "difficulty": "advanced",
            "question": "write a code to check the longest consecutive increasing sequence in a list of provided numbers, [2,4,3,5,`7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
            "expected_keywords": [
                "def",
                "else",
                "i",
                "return",
                "len",
                "append",
                "print",
                "if",
                "nums",
                "result",
                "range"
            ]
        },
        {
            "id": "adv_101",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you utilize ternary operators in Python?",
            "expected_keywords": [
                "one",
                "else",
                "condition",
                "two",
                "operators",
                "return",
                "ternary",
                "values",
                "yes",
                "example",
                "python",
                "syntax",
                "result",
                "based",
                "no",
                "if",
                "used",
                "evaluate"
            ]
        },
        {
            "id": "adv_102",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the split(), sub(), and subn() methods of the Python 're' module.",
            "expected_keywords": [
                "subn",
                "import",
                "method",
                "split",
                "re",
                "text",
                "made",
                "similar",
                "returns",
                "pattern",
                "splits",
                "string",
                "substitutions",
                "sub",
                "python",
                "occurrences",
                "spain",
                "sun",
                "example",
                "r",
                "print",
                "replaces",
                "also",
                "number",
                "s",
                "rain",
                "but",
                "replacement"
            ]
        },
        {
            "id": "adv_103",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are negative indexes and why do we utilize them?",
            "expected_keywords": [
                "provide",
                "sequence",
                "second",
                "last",
                "string",
                "python",
                "element",
                "index",
                "refers",
                "so",
                "indexes",
                "list",
                "access",
                "negative",
                "convenient",
                "such",
                "way",
                "elements",
                "end",
                "relative",
                "used"
            ]
        },
        {
            "id": "adv_104",
            "category": "python",
            "difficulty": "advanced",
            "question": "Write a code to calculate the factorial of a number using recursion.",
            "expected_keywords": [
                "here",
                "factorial",
                "recursion",
                "def",
                "calculating",
                "else",
                "output",
                "number",
                "return",
                "using",
                "example",
                "python",
                "print",
                "if",
                "n"
            ]
        },
        {
            "id": "adv_105",
            "category": "python",
            "difficulty": "advanced",
            "question": "How is memory managed in Python?",
            "expected_keywords": [
                "space",
                "containing",
                "make",
                "recycles",
                "objects",
                "private",
                "data",
                "unused",
                "internally",
                "ensured",
                "python",
                "heap",
                "memory",
                "available",
                "garbage",
                "all",
                "manager",
                "involves",
                "structures",
                "built",
                "management",
                "collector"
            ]
        },
        {
            "id": "adv_106",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain Python packages.",
            "expected_keywords": [
                "reuse",
                "organizing",
                "help",
                "promoting",
                "multiple",
                "structuring",
                "sub",
                "python",
                "contain",
                "code",
                "packages",
                "single",
                "special",
                "file",
                "codebases",
                "related",
                "modules",
                "package",
                "way",
                "contains",
                "hierarchy",
                "large",
                "directory",
                "py"
            ]
        },
        {
            "id": "adv_107",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are the main issues with dynamic typing over static typing, and vice versa?",
            "expected_keywords": [
                "typing",
                "errors",
                "make",
                "harder",
                "catches",
                "understand",
                "static",
                "performance",
                "runtime",
                "other",
                "requires",
                "lead",
                "maintain",
                "definitions",
                "improve",
                "development",
                "allows",
                "readability",
                "type",
                "code",
                "faster",
                "upfront",
                "however",
                "dynamic",
                "flexibility",
                "slow",
                "compile",
                "time",
                "types",
                "hand",
                "but",
                "determined",
                "more"
            ]
        },
        {
            "id": "adv_108",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are the benefits of NumPy arrays over (nested) Python lists?",
            "expected_keywords": [
                "nested",
                "provide",
                "several",
                "vectorized",
                "arrays",
                "manipulation",
                "more",
                "iterating",
                "reasons",
                "applied",
                "they",
                "once",
                "allows",
                "individual",
                "operations",
                "numpy",
                "efficient",
                "rather",
                "functions",
                "memory",
                "faster",
                "working",
                "access",
                "range",
                "lists",
                "also",
                "elements",
                "wide",
                "mathematical",
                "methods",
                "than",
                "support",
                "entire",
                "stored",
                "contiguous"
            ]
        },
        {
            "id": "adv_109",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the best way to add values to a Python array, i.e., which way is computationally least expensive?",
            "expected_keywords": [
                "k",
                "use",
                "average",
                "method",
                "being",
                "extend",
                "array",
                "where",
                "complexity",
                "multiple",
                "they",
                "o",
                "python",
                "efficient",
                "single",
                "values",
                "because",
                "added",
                "list",
                "these",
                "way",
                "number",
                "elements",
                "best",
                "methods",
                "append",
                "computationally",
                "time",
                "add"
            ]
        },
        {
            "id": "adv_110",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the best way to remove values from a Python array and why is it the best way?",
            "expected_keywords": [
                "specific",
                "use",
                "when",
                "you",
                "method",
                "array",
                "value",
                "searches",
                "complexity",
                "last",
                "o",
                "using",
                "python",
                "pop",
                "efficient",
                "element",
                "removing",
                "know",
                "values",
                "because",
                "list",
                "way",
                "generally",
                "best",
                "time",
                "more",
                "index",
                "while",
                "n",
                "remove"
            ]
        },
        {
            "id": "adv_111",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain how Python is a high-level and object-oriented programming language and how it still facilitates other types of programming.",
            "expected_keywords": [
                "details",
                "hardware",
                "features",
                "away",
                "objects",
                "inheritance",
                "level",
                "understand",
                "other",
                "classes",
                "allows",
                "facilitates",
                "comprehensions",
                "polymorphism",
                "python",
                "like",
                "code",
                "functions",
                "supports",
                "complex",
                "write",
                "lambda",
                "programming",
                "object",
                "procedural",
                "paradigms",
                "easier",
                "making",
                "functional",
                "providing",
                "because",
                "oriented",
                "list",
                "most",
                "expressions",
                "abstracts",
                "language",
                "high",
                "computer",
                "encapsulation",
                "also",
                "s",
                "creation"
            ]
        },
        {
            "id": "adv_112",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain monkey patching in Python.",
            "expected_keywords": [
                "party",
                "features",
                "you",
                "patching",
                "runtime",
                "extend",
                "modification",
                "classes",
                "allows",
                "source",
                "python",
                "modifying",
                "code",
                "class",
                "monkey",
                "change",
                "adding",
                "modules",
                "testing",
                "without",
                "dynamic",
                "libraries",
                "behavior",
                "module",
                "useful",
                "their",
                "third",
                "refers"
            ]
        },
        {
            "id": "adv_113",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is inheritance in Python?",
            "expected_keywords": [
                "inherit",
                "structures",
                "attributes",
                "creation",
                "allows",
                "feature",
                "child",
                "methods",
                "reuse",
                "called",
                "python",
                "inheritance",
                "promotes",
                "hierarchical",
                "code",
                "class",
                "parent",
                "another"
            ]
        },
        {
            "id": "adv_114",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are the different types of inheritance in Python?",
            "expected_keywords": [
                "combination",
                "chain",
                "inheritance",
                "multilevel",
                "two",
                "multiple",
                "classes",
                "child",
                "python",
                "hierarchical",
                "class",
                "parent",
                "one",
                "single",
                "hybrid",
                "involves",
                "inheriting",
                "types",
                "different",
                "more"
            ]
        },
        {
            "id": "adv_115",
            "category": "python",
            "difficulty": "advanced",
            "question": "Is multiple inheritance possible in Python? If so write a code that can demonstrate it.",
            "expected_keywords": [
                "here",
                "def",
                "possible",
                "b",
                "multiple",
                "inheretance",
                "yes",
                "method",
                "example",
                "python",
                "inheritance",
                "c",
                "print",
                "obj",
                "self",
                "class"
            ]
        },
        {
            "id": "adv_116",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain polymorphism in Python. Write a basic code of a class to demonstrate it.",
            "expected_keywords": [
                "implementation",
                "achieved",
                "method",
                "objects",
                "speak",
                "ways",
                "behaviors",
                "same",
                "animals",
                "classes",
                "allows",
                "overriding",
                "polymorphism",
                "python",
                "code",
                "call",
                "class",
                "animal",
                "ability",
                "take",
                "share",
                "overloading",
                "dog",
                "respond",
                "example",
                "speaks",
                "print",
                "name",
                "self",
                "meows",
                "def",
                "methods",
                "barks",
                "cat",
                "but",
                "refers",
                "different"
            ]
        },
        {
            "id": "adv_117",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is encapsulation in Python? Give a small coding example of encapsulation.",
            "expected_keywords": [
                "output",
                "restricts",
                "operate",
                "car",
                "make",
                "achieved",
                "components",
                "private",
                "data",
                "bundling",
                "help",
                "modification",
                "using",
                "called",
                "python",
                "prevent",
                "functions",
                "some",
                "class",
                "single",
                "object",
                "unit",
                "coding",
                "specifiers",
                "direct",
                "example",
                "camry",
                "accidental",
                "print",
                "access",
                "protected",
                "self",
                "def",
                "model",
                "encapsulation",
                "attributes",
                "return",
                "s",
                "methods",
                "toyota",
                "practice"
            ]
        },
        {
            "id": "adv_118",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you achieve data abstraction in Python?",
            "expected_keywords": [
                "achieved",
                "data",
                "interfaces",
                "created",
                "subclasses",
                "classes",
                "implemented",
                "abstraction",
                "using",
                "python",
                "class",
                "cannot",
                "one",
                "must",
                "its",
                "typically",
                "contains",
                "module",
                "methods",
                "abstract",
                "instantiated",
                "abc",
                "more"
            ]
        },
        {
            "id": "adv_119",
            "category": "python",
            "difficulty": "advanced",
            "question": "Are access specifiers used in Python?",
            "expected_keywords": [
                "explicit",
                "public",
                "does",
                "instead",
                "g",
                "indicates",
                "private",
                "level",
                "naming",
                "double",
                "prefix",
                "uses",
                "other",
                "python",
                "like",
                "single",
                "specifiers",
                "intended",
                "e",
                "access",
                "protected",
                "underscore",
                "languages",
                "conventions",
                "indicate",
                "member",
                "found",
                "while"
            ]
        },
        {
            "id": "adv_120",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you create an empty class in Python? And why would you need to do that?",
            "expected_keywords": [
                "define",
                "structure",
                "use",
                "statement",
                "you",
                "we",
                "pass",
                "create",
                "python",
                "emptyclass",
                "class",
                "inside",
                "definition",
                "because",
                "example",
                "then",
                "first",
                "add",
                "need",
                "attributes",
                "methods",
                "later",
                "empty",
                "want",
                "do"
            ]
        },
        {
            "id": "adv_121",
            "category": "python",
            "difficulty": "advanced",
            "question": "What does the object() function do in Python?",
            "expected_keywords": [
                "minimal",
                "does",
                "objects",
                "new",
                "creating",
                "returns",
                "featureless",
                "classes",
                "python",
                "class",
                "object",
                "take",
                "parameters",
                "provides",
                "function",
                "all",
                "any",
                "serves",
                "custom",
                "base"
            ]
        },
        {
            "id": "adv_122",
            "category": "python",
            "difficulty": "advanced",
            "question": "Write a Python program to generate a star triangle.",
            "expected_keywords": [
                "here",
                "def",
                "output",
                "i",
                "generate",
                "print",
                "example",
                "python",
                "triangle",
                "program",
                "range",
                "star",
                "n"
            ]
        },
        {
            "id": "adv_123",
            "category": "python",
            "difficulty": "advanced",
            "question": "Write a program to produce the Fibonacci series in Python using recursion.",
            "expected_keywords": [
                "here",
                "recursion",
                "def",
                "else",
                "produce",
                "i",
                "return",
                "fibonacci",
                "series",
                "using",
                "print",
                "example",
                "python",
                "range",
                "program",
                "if",
                "n"
            ]
        },
        {
            "id": "adv_124",
            "category": "python",
            "difficulty": "advanced",
            "question": "Make a Python program that checks if a sequence is a Palindrome. If not make it add the original number and the palindrome of that number till a palindrome is achieved and then print the palindrome.",
            "expected_keywords": [
                "str",
                "else",
                "int",
                "number",
                "enter",
                "break",
                "true",
                "if",
                "palindrome",
                "print",
                "input",
                "while",
                "n"
            ]
        },
        {
            "id": "adv_125",
            "category": "python",
            "difficulty": "advanced",
            "question": "Write a one-liner that counts how many capital letters are in a file. Even if the file is too large to fit in memory, your code should work.",
            "expected_keywords": [
                "char",
                "isupper",
                "line",
                "txt",
                "filename",
                "sum",
                "if",
                "open"
            ]
        },
        {
            "id": "adv_126",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Can you write a sorting algorithm for a numerical dataset?",
            "expected_keywords": [
                "here",
                "simple",
                "def",
                "j",
                "i",
                "return",
                "len",
                "arr",
                "bubble",
                "sort",
                "example",
                "python",
                "algorithm",
                "if",
                "print",
                "range",
                "n"
            ]
        },
        {
            "id": "adv_127",
            "category": "python",
            "difficulty": "advanced",
            "question": "Check the code given below and list the final values of A0, A1, ..., An after execution. Explain your reasoning.\n\n```python\nA = [0, 1, 2, 3, 4]\nfor i in range(1, len(A)):\n    A[i] += A[i - 1]\nprint(A)\n```\n",
            "expected_keywords":[0, 1, 3, 6, 10]
        },
        {
            "id": "adv_128",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is Flask and explain its benefits.",
            "expected_keywords": [
                "applications",
                "small",
                "flask",
                "use",
                "benefits",
                "components",
                "web",
                "learn",
                "prefer",
                "ideal",
                "who",
                "python",
                "sized",
                "easy",
                "medium",
                "its",
                "control",
                "making",
                "simplicity",
                "flexibility",
                "grained",
                "developers",
                "application",
                "architecture",
                "s",
                "their",
                "fine",
                "framework",
                "lightweight",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_129",
            "category": "python",
            "difficulty": "advanced",
            "question": "Is Django better compared to Flask?",
            "expected_keywords": [
                "applications",
                "flask",
                "components",
                "suitable",
                "flexible",
                "project",
                "full",
                "web",
                "larger",
                "orm",
                "authentication",
                "depends",
                "interface",
                "choice",
                "featured",
                "admin",
                "includes",
                "making",
                "allowing",
                "preferences",
                "choose",
                "requirements",
                "serve",
                "purposes",
                "developers",
                "s",
                "their",
                "developer",
                "django",
                "framework",
                "lightweight",
                "different",
                "more"
            ]
        },
        {
            "id": "adv_130",
            "category": "python",
            "difficulty": "advanced",
            "question": "Differentiate between Pyramid, Django, and Flask.",
            "expected_keywords": [
                "applications",
                "small",
                "comprehensive",
                "flask",
                "components",
                "flexible",
                "scalability",
                "full",
                "web",
                "development",
                "allows",
                "rapid",
                "featured",
                "offers",
                "tools",
                "control",
                "provides",
                "set",
                "scales",
                "simplicity",
                "pyramid",
                "flexibility",
                "grained",
                "large",
                "application",
                "built",
                "s",
                "django",
                "fine",
                "framework",
                "lightweight"
            ]
        },
        {
            "id": "adv_131",
            "category": "ml",
            "difficulty": "advanced",
            "question": "In NumPy, how will you read CSV data into an array?",
            "expected_keywords": [
                "data",
                "csv",
                "array",
                "import",
                "function",
                "you",
                "genfromtxt",
                "using",
                "print",
                "example",
                "python",
                "np",
                "numpy",
                "delimiter",
                "read"
            ]
        },
        {
            "id": "adv_132",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is GIL?",
            "expected_keywords": [
                "simultaneously",
                "programs",
                "threads",
                "objects",
                "ensures",
                "bound",
                "performance",
                "executing",
                "lock",
                "preventing",
                "multiple",
                "multi",
                "global",
                "python",
                "safety",
                "cpu",
                "threaded",
                "mutex",
                "protects",
                "thread",
                "bytecode",
                "access",
                "limit",
                "gil",
                "but",
                "interpreter"
            ]
        },
        {
            "id": "adv_133",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is PIP?",
            "expected_keywords": [
                "additional",
                "use",
                "you",
                "repositories",
                "other",
                "allows",
                "dependencies",
                "pypi",
                "python",
                "install",
                "library",
                "packages",
                "installer",
                "standard",
                "manage",
                "package",
                "included",
                "libraries",
                "pip",
                "index"
            ]
        },
        {
            "id": "adv_134",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the use of sessions in the Django framework?",
            "expected_keywords": [
                "provide",
                "you",
                "site",
                "store",
                "allow",
                "data",
                "other",
                "maintain",
                "sessions",
                "basis",
                "they",
                "authentication",
                "user",
                "state",
                "needs",
                "across",
                "preferences",
                "between",
                "visitor",
                "such",
                "way",
                "status",
                "retrieve",
                "persist",
                "requests",
                "information",
                "django",
                "preserved",
                "used",
                "per"
            ]
        },
        {
            "id": "adv_135",
            "category": "python",
            "difficulty": "advanced",
            "question": "Write a program that checks if all of the numbers in a sequence are unique.",
            "expected_keywords": [
                "here",
                "def",
                "output",
                "sequence",
                "false",
                "return",
                "numbers",
                "len",
                "check",
                "set",
                "true",
                "print",
                "example",
                "python",
                "program",
                "all",
                "if",
                "unique"
            ]
        },
        {
            "id": "adv_136",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are the various types of operators in Python?",
            "expected_keywords": [
                "including",
                "several",
                "comparison",
                "operators",
                "bitwise",
                "assignment",
                "membership",
                "identity",
                "logical",
                "types",
                "python",
                "arithmetic",
                "supports"
            ]
        },
        {
            "id": "adv_137",
            "category": "python",
            "difficulty": "advanced",
            "question": "How to write a Unicode string in Python?",
            "expected_keywords": [
                "need",
                "write",
                "u",
                "world",
                "simply",
                "string",
                "you",
                "quotes",
                "using",
                "hello",
                "example",
                "python",
                "all",
                "unicode",
                "prefix",
                "strings",
                "default"
            ]
        },
        {
            "id": "adv_138",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the differences between Python 2.x and Python 3.x?",
            "expected_keywords": [
                "statement",
                "dividing",
                "many",
                "differences",
                "returns",
                "floor",
                "two",
                "python",
                "functions",
                "some",
                "key",
                "integers",
                "ascii",
                "default",
                "object",
                "iterators",
                "xrange",
                "function",
                "true",
                "print",
                "unicode",
                "range",
                "between",
                "strings",
                "performs",
                "lists",
                "x",
                "return",
                "division",
                "integer",
                "while",
                "include"
            ]
        },
        {
            "id": "adv_139",
            "category": "python",
            "difficulty": "advanced",
            "question": "How to send an email in Python?",
            "expected_keywords": [
                "send",
                "server",
                "smtplib",
                "import",
                "you",
                "smtp",
                "text",
                "msg",
                "here",
                "using",
                "python",
                "mimetext",
                "username",
                "sendmail",
                "sender",
                "password",
                "example",
                "login",
                "com",
                "module",
                "mime",
                "receiver",
                "body",
                "email",
                "subject"
            ]
        },
        {
            "id": "adv_140",
            "category": "python",
            "difficulty": "advanced",
            "question": "Create a program to add two integers greater than 0 without using the plus operator.",
            "expected_keywords": [
                "output",
                "you",
                "plus",
                "here",
                "two",
                "using",
                "operations",
                "python",
                "integers",
                "example",
                "print",
                "operator",
                "without",
                "def",
                "carry",
                "bitwise",
                "b",
                "return",
                "while",
                "add"
            ]
        },
        {
            "id": "adv_141",
            "category": "python",
            "difficulty": "advanced",
            "question": "Create a program to convert dates from YYYY-mm-dd to dd-mm-yyyy.",
            "expected_keywords": [
                "dd",
                "output",
                "import",
                "you",
                "strptime",
                "yyyy",
                "here",
                "using",
                "python",
                "y",
                "mm",
                "convert",
                "d",
                "example",
                "print",
                "datetime",
                "def",
                "strftime",
                "return",
                "module",
                "dates",
                "m"
            ]
        },
        {
            "id": "adv_142",
            "category": "python",
            "difficulty": "advanced",
            "question": "Create a program that combines two dictionaries. If you find the same keys during combining, sum the values of these keys. Create a new dictionary.",
            "expected_keywords": [
                "output",
                "combine",
                "you",
                "common",
                "c",
                "get",
                "here",
                "two",
                "dictionary",
                "using",
                "python",
                "keys",
                "comprehension",
                "key",
                "values",
                "set",
                "d",
                "example",
                "print",
                "combined",
                "dictionaries",
                "def",
                "b",
                "return",
                "sum"
            ]
        },
        {
            "id": "adv_143",
            "category": "python",
            "difficulty": "advanced",
            "question": "Is there an inherent do-while loop in Python?",
            "expected_keywords": [
                "does",
                "statement",
                "break",
                "you",
                "no",
                "here",
                "loop",
                "condition",
                "using",
                "python",
                "code",
                "execute",
                "simulate",
                "true",
                "example",
                "if",
                "inherent",
                "however",
                "while",
                "do"
            ]
        },
        {
            "id": "adv_144",
            "category": "python",
            "difficulty": "ml",
            "question": "What kinds of joins are offered by Pandas?",
            "expected_keywords": [
                "rows",
                "several",
                "nans",
                "no",
                "dataframe",
                "returns",
                "where",
                "join",
                "matches",
                "joins",
                "keys",
                "matching",
                "offers",
                "there",
                "only",
                "right",
                "dataframes",
                "inner",
                "left",
                "all",
                "including",
                "outer",
                "types",
                "both",
                "pandas"
            ]
        },
        {
            "id": "adv_145",
            "category": "python",
            "difficulty": "ml",
            "question": "How are data frames in Pandas merged?",
            "expected_keywords": [
                "pd",
                "import",
                "merge",
                "how",
                "c",
                "dataframe",
                "here",
                "using",
                "python",
                "key",
                "dataframes",
                "merge",
                "function",
                "inner",
                "d",
                "example",
                "merged",
                "print",
                "b",
                "pandas"
            ]
        },
        {
            "id": "adv_146",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the best way to get the first five entries of a data frame?",
            "expected_keywords": [
                "five",
                "entries",
                "pd",
                "use",
                "import",
                "method",
                "df",
                "dataframe",
                "get",
                "here",
                "head",
                "python",
                "example",
                "first",
                "print",
                "range",
                "way",
                "b",
                "best",
                "pandas"
            ]
        },
        {
            "id": "adv_147",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Discuss the role of the loss function in a regression problem?",
            "expected_keywords": [
                "problem",
                "mse",
                "mae",
                "how",
                "common",
                "minimize",
                "data",
                "include",
                "improve",
                "functions",
                "measures",
                "accuracy",
                "values",
                "function",
                "true",
                "absolute",
                "predictions",
                "error",
                "goal",
                "predicted",
                "between",
                "loss",
                "squared",
                "model",
                "match",
                "s",
                "actual",
                "well",
                "mean",
                "quantifies",
                "difference",
                "regression"
            ]
        },
        {
            "id": "adv_148",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the validation curve in model evaluation?",
            "expected_keywords": [
                "detect",
                "affect",
                "how",
                "understanding",
                "hyperparameter",
                "performance",
                "curve",
                "optimal",
                "value",
                "balances",
                "validation",
                "one",
                "scores",
                "bias",
                "overfitting",
                "evaluate",
                "underfitting",
                "choose",
                "training",
                "variance",
                "model",
                "s",
                "against",
                "helps",
                "plotting",
                "analyzing",
                "used",
                "changes"
            ]
        },
        {
            "id": "adv_149",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a static and a dynamic learning rate?",
            "expected_keywords": [
                "far",
                "when",
                "convergence",
                "higher",
                "static",
                "performance",
                "close",
                "optimal",
                "improve",
                "simpler",
                "rate",
                "solution",
                "remains",
                "certain",
                "stages",
                "based",
                "process",
                "constant",
                "all",
                "criteria",
                "dynamic",
                "training",
                "learning",
                "such",
                "model",
                "number",
                "epochs",
                "implement",
                "but",
                "adjusting",
                "lower",
                "throughout",
                "while",
                "changes"
            ]
        },
        {
            "id": "adv_150",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the dropout rate in a neural network?",
            "expected_keywords": [
                "specific",
                "randomly",
                "features",
                "reduces",
                "technique",
                "forces",
                "units",
                "zero",
                "during",
                "dropout",
                "neural",
                "proportion",
                "learn",
                "improve",
                "rate",
                "prevent",
                "setting",
                "generalization",
                "regularization",
                "overfitting",
                "input",
                "training",
                "fraction",
                "model",
                "involves",
                "reliance",
                "network",
                "helps",
                "robust",
                "neurons",
                "drop",
                "used",
                "specifies",
                "more"
            ]
        },
        {
            "id": "adv_151",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Discuss the role of the encoder in a sequence-to-sequence model?",
            "expected_keywords": [
                "output",
                "sequence",
                "vector",
                "how",
                "influences",
                "generates",
                "quality",
                "represented",
                "determines",
                "fixed",
                "encoder",
                "relevant",
                "crucial",
                "context",
                "passed",
                "role",
                "length",
                "processes",
                "generated",
                "converts",
                "then",
                "input",
                "model",
                "decoder",
                "s",
                "well",
                "information",
                "subsequently",
                "captures"
            ]
        },
        {
            "id": "adv_152",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the learning curve in machine learning?",
            "expected_keywords": [
                "graphical",
                "data",
                "performance",
                "validation",
                "issues",
                "accuracy",
                "error",
                "diagnosing",
                "overfitting",
                "benefit",
                "respect",
                "underfitting",
                "size",
                "whether",
                "training",
                "typically",
                "learning",
                "model",
                "such",
                "number",
                "machine",
                "s",
                "against",
                "helps",
                "time",
                "iterations",
                "plots",
                "amount",
                "representation",
                "curve",
                "more"
            ]
        },
        {
            "id": "adv_153",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a local minimum and a global minimum in optimization?",
            "expected_keywords": [
                "especially",
                "get",
                "optimization",
                "where",
                "value",
                "neighboring",
                "points",
                "global",
                "minimum",
                "objective",
                "dimensional",
                "necessarily",
                "landscape",
                "point",
                "algorithms",
                "stuck",
                "complex",
                "local",
                "its",
                "minima",
                "lowest",
                "function",
                "attains",
                "absolute",
                "goal",
                "across",
                "overall",
                "find",
                "high",
                "sometimes",
                "than",
                "lower",
                "but",
                "entire",
                "spaces"
            ]
        },
        {
            "id": "adv_154",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain what a classifier is.",
            "expected_keywords": [
                "assigns",
                "trees",
                "features",
                "vector",
                "discrete",
                "data",
                "image",
                "medical",
                "spam",
                "neural",
                "label",
                "where",
                "outcomes",
                "diagnosis",
                "various",
                "decision",
                "classification",
                "using",
                "classifier",
                "classifiers",
                "recognition",
                "algorithms",
                "tasks",
                "its",
                "goal",
                "detection",
                "based",
                "input",
                "learning",
                "model",
                "such",
                "including",
                "machines",
                "machine",
                "built",
                "networks",
                "category",
                "support",
                "predict",
                "used"
            ]
        },
        {
            "id": "adv_155",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the result of the execution of the following code?\n\n>>> sum(\"\")\n>>> sum(\"\", [])\n>>> sum(\"\", {})",
            "expected_keywords": [
                "raises",
                "output",
                "use",
                "when",
                "instead",
                "result",
                "t",
                "join",
                "python",
                "code",
                "seq",
                "typeerror",
                "cannot",
                "execution",
                "so",
                "function",
                "strings",
                "attempting",
                "following",
                "sum",
                "do"
            ]
        },
        {
            "id": "adv_156",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the result of the execution of the following code: >>> x = (1 << 53) + 1 >>> x + 1.0 > x",
            "expected_keywords": [
                "output",
                "does",
                "result",
                "value",
                "precision",
                "python",
                "like",
                "code",
                "point",
                "execution",
                "floating",
                "limited",
                "its",
                "change",
                "because",
                "adding",
                "arithmetic",
                "false",
                "x",
                "large",
                "following",
                "integer"
            ]
        },
        {
            "id": "adv_157",
            "category": "python",
            "difficulty": "advanced",
            "question": "What is the result of the execution of the following code? >>> max(-0.0, 0.0)",
            "expected_keywords": [
                "returns",
                "max",
                "output",
                "considered",
                "execution",
                "positive",
                "equal",
                "but",
                "zero",
                "python",
                "following",
                "result",
                "code"
            ]
        },
        {
            "id": "adv_158",
            "category": "python",
            "difficulty": "advanced",
            "question": "How does Python's garbage collection work?",
            "expected_keywords": [
                "works",
                "keeps",
                "when",
                "each",
                "longer",
                "references",
                "objects",
                "zero",
                "no",
                "cyclic",
                "other",
                "detects",
                "track",
                "counting",
                "using",
                "reference",
                "python",
                "drops",
                "reachable",
                "collection",
                "object",
                "deallocated",
                "garbage",
                "groups",
                "collects",
                "number",
                "s",
                "collector",
                "but",
                "program",
                "count"
            ]
        },
        {
            "id": "adv_159",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are decorators in Python, and how do you use them?",
            "expected_keywords": [
                "define",
                "use",
                "after",
                "you",
                "new",
                "syntax",
                "extend",
                "func",
                "argument",
                "wrapper",
                "they",
                "implemented",
                "happening",
                "using",
                "called",
                "python",
                "code",
                "functions",
                "another",
                "modifications",
                "take",
                "decorators",
                "before",
                "function",
                "example",
                "print",
                "desired",
                "decorator",
                "without",
                "changing",
                "def",
                "way",
                "something",
                "return",
                "behavior",
                "methods",
                "their",
                "actual",
                "hello",
                "modify",
                "apply"
            ]
        },
        {
            "id": "adv_160",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the Global Interpreter Lock (GIL) in Python.",
            "expected_keywords": [
                "applications",
                "simultaneously",
                "programs",
                "threads",
                "objects",
                "ensures",
                "bound",
                "performance",
                "executing",
                "lock",
                "preventing",
                "multiple",
                "multi",
                "allows",
                "global",
                "bottleneck",
                "python",
                "safety",
                "cpu",
                "threaded",
                "execute",
                "one",
                "mutex",
                "only",
                "protects",
                "thread",
                "bytecode",
                "access",
                "limit",
                "gil",
                "time",
                "but",
                "interpreter"
            ]
        },
        {
            "id": "adv_161",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are metaclasses in Python, and how do they work?",
            "expected_keywords": [
                "customize",
                "define",
                "dct",
                "instances",
                "how",
                "you",
                "meta",
                "cls",
                "allow",
                "pass",
                "f",
                "creating",
                "classes",
                "they",
                "overriding",
                "type",
                "using",
                "python",
                "like",
                "class",
                "behave",
                "super",
                "bases",
                "definition",
                "example",
                "print",
                "name",
                "specified",
                "keyword",
                "def",
                "metaclasses",
                "creation",
                "behavior",
                "methods",
                "return",
                "whose",
                "metaclass",
                "myclass"
            ]
        },
        {
            "id": "adv_162",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you implement a singleton pattern in Python?",
            "expected_keywords": [
                "output",
                "singleton",
                "you",
                "method",
                "cls",
                "args",
                "pattern",
                "global",
                "overriding",
                "python",
                "class",
                "point",
                "one",
                "none",
                "only",
                "super",
                "true",
                "providing",
                "example",
                "ensuring",
                "access",
                "if",
                "print",
                "def",
                "way",
                "return",
                "kwargs",
                "instance",
                "implement",
                "do"
            ]
        },
        {
            "id": "adv_163",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `__init__` method in a class?",
            "expected_keywords": [
                "required",
                "when",
                "you",
                "method",
                "arguments",
                "constructor",
                "created",
                "pass",
                "allows",
                "called",
                "setup",
                "class",
                "initial",
                "state",
                "special",
                "object",
                "set",
                "perform",
                "initialize",
                "attributes",
                "any",
                "s",
                "instance",
                "used"
            ]
        },
        {
            "id": "adv_164",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you handle exceptions in Python? Provide an example.",
            "expected_keywords": [
                "always",
                "occurs",
                "you",
                "finally",
                "zero",
                "result",
                "divide",
                "no",
                "try",
                "executes",
                "zerodivisionerror",
                "else",
                "regardless",
                "using",
                "occurred",
                "python",
                "code",
                "execute",
                "cannot",
                "successful",
                "blocks",
                "example",
                "block",
                "raise",
                "print",
                "if",
                "whether",
                "contains",
                "division",
                "except",
                "exceptions",
                "handles",
                "handle",
                "exception"
            ]
        },
        {
            "id": "adv_165",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are Python generators, and how do they differ from regular functions?",
            "expected_keywords": [
                "yield",
                "instead",
                "created",
                "generator",
                "where",
                "value",
                "multiple",
                "they",
                "type",
                "using",
                "python",
                "generators",
                "functions",
                "efficient",
                "one",
                "single",
                "memory",
                "generate",
                "values",
                "iterable",
                "makes",
                "left",
                "expressions",
                "fly",
                "keyword",
                "differ",
                "regular",
                "large",
                "return",
                "time",
                "terminate",
                "more",
                "resumed",
                "datasets",
                "do"
            ]
        },
        {
            "id": "adv_166",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the concept of context managers and the `with` statement.",
            "expected_keywords": [
                "automatically",
                "define",
                "statement",
                "when",
                "after",
                "how",
                "resources",
                "objects",
                "ensures",
                "txt",
                "create",
                "read",
                "here",
                "managers",
                "managed",
                "properly",
                "using",
                "python",
                "context",
                "content",
                "code",
                "files",
                "executed",
                "open",
                "file",
                "closed",
                "set",
                "example",
                "r",
                "block",
                "ensuring",
                "clean",
                "manager",
                "methods",
                "used",
                "working"
            ]
        },
        {
            "id": "adv_167",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast `@staticmethod` and `@classmethod`.",
            "expected_keywords": [
                "parameter",
                "define",
                "does",
                "cls",
                "method",
                "bound",
                "static",
                "classmethod",
                "takes",
                "python",
                "class",
                "state",
                "take",
                "decorators",
                "example",
                "print",
                "access",
                "self",
                "staticmethod",
                "def",
                "methods",
                "instance",
                "myclass",
                "defines",
                "used",
                "modify"
            ]
        },
        {
            "id": "adv_168",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you create a custom exception in Python?",
            "expected_keywords": [
                "you",
                "new",
                "try",
                "create",
                "message",
                "python",
                "class",
                "super",
                "e",
                "defining",
                "example",
                "raise",
                "print",
                "inherits",
                "self",
                "def",
                "mycustomexception",
                "built",
                "except",
                "custom",
                "exception"
            ]
        },
        {
            "id": "adv_169",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a binary search algorithm in Python?",
            "expected_keywords": [
                "output",
                "len",
                "you",
                "target",
                "algorithm",
                "else",
                "arr",
                "python",
                "binary",
                "mid",
                "search",
                "right",
                "follows",
                "print",
                "left",
                "if",
                "elif",
                "def",
                "return",
                "implement",
                "while"
            ]
        },
        {
            "id": "adv_170",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are lambda functions, and when would you use them?",
            "expected_keywords": [
                "output",
                "small",
                "when",
                "needed",
                "period",
                "arguments",
                "map",
                "short",
                "sorted",
                "they",
                "defined",
                "using",
                "constructs",
                "filter",
                "python",
                "y",
                "like",
                "functions",
                "lambda",
                "programming",
                "one",
                "simple",
                "only",
                "function",
                "functional",
                "example",
                "expression",
                "print",
                "keyword",
                "such",
                "x",
                "any",
                "number",
                "but",
                "anonymous",
                "used",
                "add"
            ]
        },
        {
            "id": "adv_171",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you read and write files in Python?",
            "expected_keywords": [
                "file",
                "w",
                "built",
                "world",
                "function",
                "you",
                "using",
                "print",
                "example",
                "python",
                "txt",
                "r",
                "content",
                "hello",
                "files",
                "open",
                "write",
                "read"
            ]
        },
        {
            "id": "adv_172",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `map()` function?",
            "expected_keywords": [
                "output",
                "each",
                "numbers",
                "map",
                "applies",
                "other",
                "returns",
                "applying",
                "square",
                "python",
                "transformation",
                "element",
                "collection",
                "object",
                "items",
                "results",
                "function",
                "iterable",
                "example",
                "list",
                "print",
                "input",
                "all",
                "iterator",
                "def",
                "x",
                "any",
                "return",
                "useful",
                "given"
            ]
        },
        {
            "id": "adv_173",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you create a virtual environment in Python?",
            "expected_keywords": [
                "windows",
                "you",
                "environment",
                "scripts",
                "macos",
                "create",
                "virtual",
                "source",
                "using",
                "python",
                "bin",
                "activate",
                "myenv",
                "venv",
                "example",
                "bash",
                "module",
                "unix",
                "m"
            ]
        },
        {
            "id": "adv_174",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast `*args` and `**kwargs`?",
            "expected_keywords": [
                "output",
                "you",
                "arguments",
                "args",
                "pass",
                "positional",
                "definitions",
                "allows",
                "python",
                "variable",
                "function",
                "example",
                "print",
                "keyword",
                "def",
                "b",
                "number",
                "kwargs",
                "used",
                "while"
            ]
        },
        {
            "id": "adv_175",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you check if a string is a palindrome in Python?",
            "expected_keywords": [
                "output",
                "check",
                "you",
                "comparing",
                "string",
                "radar",
                "python",
                "its",
                "true",
                "example",
                "print",
                "false",
                "if",
                "def",
                "return",
                "s",
                "reverse",
                "palindrome",
                "hello"
            ]
        },
        {
            "id": "adv_176",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `filter()` function?",
            "expected_keywords": [
                "output",
                "numbers",
                "returns",
                "condition",
                "constructs",
                "filter",
                "python",
                "collection",
                "function",
                "iterable",
                "true",
                "example",
                "list",
                "print",
                "based",
                "iterator",
                "def",
                "x",
                "elements",
                "return",
                "used"
            ]
        },
        {
            "id": "adv_177",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a queue using collections in Python?",
            "expected_keywords": [
                "enqueue",
                "output",
                "queue",
                "dequeue",
                "popleft",
                "elements",
                "module",
                "import",
                "you",
                "append",
                "using",
                "implement",
                "example",
                "deque",
                "python",
                "print",
                "collections",
                "class"
            ]
        },
        {
            "id": "adv_178",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are the differences between Python 2 and Python 3?",
            "expected_keywords": [
                "statement",
                "dividing",
                "many",
                "differences",
                "returns",
                "floor",
                "two",
                "python",
                "functions",
                "some",
                "key",
                "integers",
                "ascii",
                "default",
                "object",
                "iterators",
                "xrange",
                "function",
                "true",
                "print",
                "unicode",
                "range",
                "between",
                "strings",
                "performs",
                "lists",
                "return",
                "division",
                "integer",
                "while",
                "include"
            ]
        },
        {
            "id": "adv_179",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you remove duplicates from a list?",
            "expected_keywords": [
                "output",
                "duplicates",
                "set",
                "you",
                "then",
                "back",
                "converting",
                "python",
                "example",
                "list",
                "print",
                "remove"
            ]
        },
        {
            "id": "adv_180",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `itertools` module?",
            "expected_keywords": [
                "iteration",
                "itertools",
                "grouping",
                "generating",
                "products",
                "infinite",
                "combinations",
                "permutations",
                "creating",
                "python",
                "efficient",
                "functions",
                "complex",
                "collection",
                "iterators",
                "tasks",
                "memory",
                "tools",
                "provides",
                "includes",
                "cartesian",
                "fast",
                "useful",
                "module",
                "concise",
                "well",
                "manner",
                "filtering",
                "performing",
                "working"
            ]
        },
        {
            "id": "adv_181",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a linked list in Python?",
            "expected_keywords": [
                "output",
                "linked",
                "you",
                "data",
                "node",
                "head",
                "last",
                "python",
                "class",
                "none",
                "ll",
                "defining",
                "example",
                "list",
                "print",
                "if",
                "self",
                "def",
                "current",
                "linkedlist",
                "return",
                "append",
                "implement",
                "next",
                "while"
            ]
        },
        {
            "id": "adv_182",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast a shallow copy and a deep copy?",
            "expected_keywords": [
                "instances",
                "references",
                "objects",
                "new",
                "deepcopy",
                "creating",
                "deep",
                "python",
                "object",
                "entirely",
                "inserts",
                "provides",
                "function",
                "all",
                "shallow",
                "creates",
                "recursively",
                "module",
                "copy",
                "but",
                "original",
                "found",
                "copies"
            ]
        },
        {
            "id": "adv_183",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you find the largest and smallest numbers in a list?",
            "expected_keywords": [
                "find",
                "output",
                "numbers",
                "smallest",
                "you",
                "largest",
                "using",
                "example",
                "python",
                "print",
                "list",
                "max",
                "functions",
                "min"
            ]
        },
        {
            "id": "adv_184",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `collections` module?",
            "expected_keywords": [
                "provide",
                "additional",
                "your",
                "counter",
                "help",
                "classes",
                "improve",
                "readability",
                "python",
                "container",
                "deque",
                "like",
                "code",
                "some",
                "collections",
                "key",
                "functionality",
                "offer",
                "specialized",
                "purpose",
                "namedtuple",
                "provides",
                "general",
                "these",
                "datatypes",
                "dictionaries",
                "lists",
                "defaultdict",
                "built",
                "s",
                "module",
                "tuples",
                "containers",
                "efficiency",
                "ordereddict",
                "alternatives",
                "include"
            ]
        },
        {
            "id": "adv_185",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a breadth-first search (BFS) algorithm?",
            "expected_keywords": [
                "output",
                "queue",
                "import",
                "you",
                "start",
                "algorithm",
                "c",
                "f",
                "extend",
                "popleft",
                "using",
                "python",
                "deque",
                "collections",
                "search",
                "graph",
                "set",
                "e",
                "bfs",
                "example",
                "d",
                "first",
                "print",
                "vertex",
                "if",
                "def",
                "b",
                "visited",
                "breadth",
                "implement",
                "while",
                "add"
            ]
        },
        {
            "id": "adv_186",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `functools` module?",
            "expected_keywords": [
                "reusable",
                "your",
                "you",
                "higher",
                "create",
                "help",
                "other",
                "improve",
                "readability",
                "partial",
                "python",
                "reduce",
                "code",
                "functions",
                "order",
                "programming",
                "tools",
                "provides",
                "act",
                "includes",
                "functional",
                "allowing",
                "modular",
                "these",
                "such",
                "return",
                "module",
                "functools",
                "efficiency",
                "more"
            ]
        },
        {
            "id": "adv_187",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you create a class that behaves like a function?",
            "expected_keywords": [
                "def",
                "output",
                "x",
                "value",
                "return",
                "adder",
                "function",
                "you",
                "method",
                "like",
                "defining",
                "example",
                "python",
                "print",
                "behaves",
                "create",
                "class",
                "self"
            ]
        },
        {
            "id": "adv_188",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast `__getitem__` and `__setitem__`?",
            "expected_keywords": [
                "output",
                "define",
                "when",
                "mylist",
                "how",
                "accessed",
                "brackets",
                "data",
                "value",
                "using",
                "square",
                "python",
                "index",
                "class",
                "special",
                "object",
                "behave",
                "set",
                "example",
                "print",
                "self",
                "def",
                "return",
                "retrieve",
                "methods",
                "item",
                "used",
                "while"
            ]
        },
        {
            "id": "adv_189",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How do you implement a depth-first search (DFS) algorithm?",
            "expected_keywords": [
                "dfs",
                "output",
                "you",
                "start",
                "algorithm",
                "c",
                "f",
                "stack",
                "using",
                "python",
                "search",
                "none",
                "graph",
                "set",
                "e",
                "depth",
                "example",
                "d",
                "first",
                "print",
                "if",
                "def",
                "b",
                "visited",
                "return",
                "implement",
                "next",
                "add"
            ]
        },
        {
            "id": "adv_190",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `os` module?",
            "expected_keywords": [
                "interacting",
                "os",
                "essential",
                "environment",
                "system",
                "level",
                "manipulation",
                "platform",
                "operations",
                "python",
                "functions",
                "file",
                "provides",
                "includes",
                "variable",
                "access",
                "operating",
                "way",
                "directory",
                "interact",
                "module",
                "management",
                "independent",
                "manner",
                "performing",
                "process"
            ]
        },
        {
            "id": "adv_191",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you use regular expressions in Python?",
            "expected_keywords": [
                "output",
                "searching",
                "use",
                "import",
                "you",
                "re",
                "text",
                "apples",
                "oranges",
                "pattern",
                "manipulating",
                "matches",
                "using",
                "python",
                "functions",
                "matching",
                "there",
                "provides",
                "d",
                "example",
                "r",
                "print",
                "expressions",
                "strings",
                "findall",
                "regular",
                "module"
            ]
        },
        {
            "id": "adv_192",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast `break`, `continue`, and `pass`?",
            "expected_keywords": [
                "iteration",
                "output",
                "continue",
                "required",
                "does",
                "when",
                "statement",
                "break",
                "needed",
                "no",
                "pass",
                "null",
                "operation",
                "flow",
                "loop",
                "nothing",
                "move",
                "placeholder",
                "skip",
                "prematurely",
                "python",
                "syntactically",
                "code",
                "statements",
                "inside",
                "control",
                "example",
                "print",
                "range",
                "if",
                "current",
                "i",
                "action",
                "but",
                "exit",
                "next",
                "rest",
                "used"
            ]
        },
        {
            "id": "adv_193",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a priority queue in Python?",
            "expected_keywords": [
                "priority",
                "output",
                "queue",
                "heappop",
                "module",
                "import",
                "you",
                "using",
                "implement",
                "example",
                "python",
                "f",
                "processing",
                "print",
                "task",
                "heapq",
                "while",
                "heappush"
            ]
        },
        {
            "id": "adv_194",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `subprocess` module?",
            "expected_keywords": [
                "interacting",
                "output",
                "programs",
                "you",
                "spawn",
                "new",
                "connect",
                "script",
                "allows",
                "subprocess",
                "python",
                "interface",
                "pipes",
                "codes",
                "commands",
                "powerful",
                "running",
                "processes",
                "provides",
                "error",
                "input",
                "external",
                "return",
                "module",
                "their",
                "obtain",
                "within"
            ]
        },
        {
            "id": "adv_195",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you create a property in a class?",
            "expected_keywords": [
                "def",
                "output",
                "value",
                "return",
                "function",
                "you",
                "property",
                "using",
                "setter",
                "example",
                "python",
                "myclass",
                "print",
                "decorator",
                "obj",
                "create",
                "class",
                "self"
            ]
        },
        {
            "id": "adv_196",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast `staticmethod` and `classmethod`?",
            "expected_keywords": [
                "parameter",
                "define",
                "does",
                "cls",
                "method",
                "bound",
                "static",
                "classmethod",
                "takes",
                "python",
                "class",
                "state",
                "take",
                "decorators",
                "example",
                "print",
                "access",
                "self",
                "staticmethod",
                "def",
                "methods",
                "instance",
                "myclass",
                "defines",
                "used",
                "modify"
            ]
        },
        {
            "id": "adv_197",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a simple web server in Python?",
            "expected_keywords": [
                "localhost",
                "port",
                "server",
                "import",
                "you",
                "http",
                "f",
                "web",
                "using",
                "python",
                "simple",
                "running",
                "simplehttprequesthandler",
                "httpserver",
                "host",
                "example",
                "print",
                "module",
                "implement"
            ]
        },
        {
            "id": "adv_198",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `threading` module?",
            "expected_keywords": [
                "concurrently",
                "threading",
                "threads",
                "you",
                "your",
                "bound",
                "create",
                "performance",
                "creating",
                "multiple",
                "classes",
                "o",
                "improving",
                "parallel",
                "python",
                "functions",
                "tasks",
                "synchronizing",
                "provides",
                "includes",
                "allowing",
                "run",
                "manage",
                "responsiveness",
                "way",
                "i",
                "useful",
                "module",
                "starting",
                "program",
                "performing"
            ]
        },
        {
            "id": "adv_199",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you use the `multiprocessing` module?",
            "expected_keywords": [
                "worker",
                "import",
                "you",
                "target",
                "start",
                "bound",
                "create",
                "f",
                "args",
                "multiple",
                "join",
                "allows",
                "parallel",
                "python",
                "cpu",
                "p",
                "tasks",
                "execution",
                "processes",
                "cores",
                "num",
                "benefit",
                "example",
                "print",
                "multiprocessing",
                "if",
                "range",
                "manage",
                "separate",
                "enabling",
                "def",
                "i",
                "useful",
                "module",
                "append",
                "process"
            ]
        },
        {
            "id": "adv_200",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you create a command-line interface (CLI) in Python?",
            "expected_keywords": [
                "define",
                "import",
                "parser",
                "you",
                "parse",
                "arguments",
                "nargs",
                "create",
                "cli",
                "args",
                "argparse",
                "expected",
                "help",
                "accumulate",
                "description",
                "allows",
                "type",
                "line",
                "using",
                "them",
                "command",
                "interface",
                "python",
                "argumentparser",
                "dest",
                "some",
                "integers",
                "default",
                "const",
                "max",
                "values",
                "example",
                "metavar",
                "print",
                "access",
                "find",
                "int",
                "action",
                "module",
                "their",
                "sum",
                "integer",
                "accumulator",
                "n",
                "process"
            ]
        },
        {
            "id": "adv_201",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast `str` and `repr` in Python?",
            "expected_keywords": [
                "str",
                "provide",
                "output",
                "define",
                "method",
                "objects",
                "unambiguous",
                "string",
                "user",
                "python",
                "friendly",
                "class",
                "object",
                "repr",
                "example",
                "print",
                "representations",
                "while",
                "obj",
                "self",
                "def",
                "return",
                "methods",
                "myclass",
                "representation",
                "used",
                "recreate"
            ]
        },
        {
            "id": "adv_202",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a simple caching mechanism in Python?",
            "expected_keywords": [
                "n",
                "output",
                "calls",
                "import",
                "you",
                "repeated",
                "performance",
                "improving",
                "using",
                "python",
                "caches",
                "caching",
                "simple",
                "calculations",
                "results",
                "function",
                "mechanism",
                "avoiding",
                "example",
                "print",
                "decorator",
                "if",
                "def",
                "return",
                "fibonacci",
                "implement",
                "functools",
                "maxsize"
            ]
        },
        {
            "id": "adv_203",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `logging` module in Python?",
            "expected_keywords": [
                "output",
                "g",
                "programs",
                "import",
                "you",
                "monitoring",
                "flexible",
                "level",
                "during",
                "events",
                "info",
                "track",
                "message",
                "messages",
                "allows",
                "debug",
                "configured",
                "python",
                "supports",
                "critical",
                "basicconfig",
                "levels",
                "console",
                "warning",
                "emitting",
                "execution",
                "file",
                "provides",
                "e",
                "happen",
                "error",
                "example",
                "logging",
                "destinations",
                "useful",
                "module",
                "log",
                "debugging",
                "program",
                "framework",
                "different"
            ]
        },
        {
            "id": "adv_204",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you create a custom exception hierarchy in Python?",
            "expected_keywords": [
                "you",
                "new",
                "try",
                "create",
                "pass",
                "other",
                "message",
                "classes",
                "python",
                "class",
                "inherit",
                "super",
                "e",
                "defining",
                "example",
                "raise",
                "print",
                "mybaseexception",
                "self",
                "def",
                "mycustomexception",
                "hierarchy",
                "built",
                "except",
                "custom",
                "exception"
            ]
        },
        {
            "id": "adv_205",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a simple game loop in Python?",
            "expected_keywords": [
                "updates",
                "import",
                "you",
                "achieve",
                "renders",
                "loop",
                "events",
                "sleep",
                "condition",
                "continuously",
                "using",
                "python",
                "state",
                "simple",
                "running",
                "true",
                "update",
                "example",
                "fps",
                "if",
                "false",
                "game",
                "time",
                "implement",
                "exit",
                "render",
                "handle",
                "while"
            ]
        },
        {
            "id": "adv_206",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `xml` module in Python?",
            "expected_keywords": [
                "api",
                "parsing",
                "applications",
                "several",
                "dom",
                "data",
                "submodules",
                "creating",
                "web",
                "various",
                "elementtree",
                "services",
                "using",
                "python",
                "processing",
                "efficient",
                "files",
                "documents",
                "simple",
                "object",
                "tools",
                "provides",
                "includes",
                "document",
                "minidom",
                "such",
                "model",
                "useful",
                "module",
                "xml",
                "etree",
                "configuration",
                "working"
            ]
        },
        {
            "id": "adv_207",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you work with JSON data in Python?",
            "expected_keywords": [
                "loads",
                "output",
                "import",
                "you",
                "parse",
                "json",
                "data",
                "decoding",
                "dictionary",
                "string",
                "using",
                "python",
                "functions",
                "dumps",
                "work",
                "provides",
                "alice",
                "convert",
                "example",
                "print",
                "name",
                "age",
                "encoding",
                "module"
            ]
        },
        {
            "id": "adv_208",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `__slots__` declaration in a class?",
            "expected_keywords": [
                "output",
                "data",
                "lead",
                "members",
                "python",
                "attribute",
                "explicitly",
                "prevent",
                "declare",
                "class",
                "memory",
                "faster",
                "alice",
                "example",
                "print",
                "access",
                "obj",
                "name",
                "self",
                "age",
                "def",
                "declaration",
                "attributes",
                "savings",
                "creation",
                "myclass",
                "used"
            ]
        },
        {
            "id": "adv_209",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you implement a custom sorting function using the `key` parameter?",
            "expected_keywords": [
                "parameter",
                "output",
                "each",
                "you",
                "bob",
                "sorting",
                "sorted",
                "charlie",
                "using",
                "python",
                "element",
                "passing",
                "key",
                "lambda",
                "comparison",
                "function",
                "alice",
                "example",
                "list",
                "print",
                "name",
                "age",
                "x",
                "extracts",
                "implement",
                "custom"
            ]
        },
        {
            "id": "adv_210",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `__call__` method in a class?",
            "expected_keywords": [
                "callable",
                "output",
                "adder",
                "method",
                "objects",
                "creating",
                "value",
                "allows",
                "called",
                "python",
                "class",
                "function",
                "example",
                "print",
                "self",
                "def",
                "x",
                "return",
                "useful",
                "instance"
            ]
        },
        {
            "id": "adv_211",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you create a thread-safe singleton in Python?",
            "expected_keywords": [
                "singleton",
                "threading",
                "import",
                "you",
                "cls",
                "create",
                "args",
                "lock",
                "using",
                "python",
                "ensure",
                "class",
                "safe",
                "one",
                "none",
                "only",
                "super",
                "thread",
                "example",
                "if",
                "def",
                "return",
                "kwargs",
                "instance"
            ]
        },
        {
            "id": "adv_212",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `contextlib` module?",
            "expected_keywords": [
                "contextlib",
                "statement",
                "you",
                "resources",
                "ensures",
                "create",
                "generator",
                "managers",
                "properly",
                "allows",
                "using",
                "python",
                "context",
                "like",
                "functions",
                "closing",
                "contextmanager",
                "closed",
                "provides",
                "includes",
                "utilities",
                "simplifies",
                "creation",
                "module",
                "management",
                "working"
            ]
        },
        {
            "id": "adv_213",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you implement a simple state machine in Python?",
            "expected_keywords": [
                "output",
                "you",
                "transition",
                "them",
                "statemachine",
                "python",
                "class",
                "states",
                "state",
                "simple",
                "transitions",
                "defining",
                "example",
                "print",
                "if",
                "self",
                "between",
                "elif",
                "def",
                "sm",
                "b",
                "machine",
                "implement",
                "event"
            ]
        },
        {
            "id": "adv_214",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `functools.lru_cache` decorator?",
            "expected_keywords": [
                "n",
                "output",
                "calls",
                "import",
                "least",
                "repeated",
                "performance",
                "uses",
                "improving",
                "python",
                "lru",
                "caching",
                "calculations",
                "results",
                "strategy",
                "function",
                "avoiding",
                "example",
                "print",
                "decorator",
                "if",
                "recently",
                "cache",
                "size",
                "limit",
                "def",
                "return",
                "fibonacci",
                "functools",
                "used",
                "maxsize"
            ]
        },
        {
            "id": "adv_215",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you implement a custom JSON encoder in Python?",
            "expected_keywords": [
                "output",
                "import",
                "you",
                "method",
                "cls",
                "json",
                "isinstance",
                "value",
                "overriding",
                "encoder",
                "python",
                "dumps",
                "class",
                "default",
                "jsonencoder",
                "subclassing",
                "super",
                "example",
                "print",
                "if",
                "obj",
                "self",
                "name",
                "customencoder",
                "def",
                "return",
                "implement",
                "myclass",
                "custom"
            ]
        },
        {
            "id": "adv_216",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `__contains__` method in a class?",
            "expected_keywords": [
                "output",
                "define",
                "mycontainer",
                "check",
                "you",
                "method",
                "present",
                "custom",
                "allows",
                "python",
                "container",
                "class",
                "items",
                "true",
                "example",
                "print",
                "if",
                "false",
                "self",
                "operator",
                "def",
                "return",
                "behavior",
                "item",
                "used"
            ]
        },
        {
            "id": "adv_217",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you implement a simple command pattern in Python?",
            "expected_keywords": [
                "lightoncommand",
                "you",
                "method",
                "light",
                "pass",
                "classes",
                "pattern",
                "remotecontrol",
                "command",
                "python",
                "lightoffcommand",
                "class",
                "execute",
                "simple",
                "commands",
                "defining",
                "example",
                "remote",
                "print",
                "self",
                "def",
                "append",
                "implement"
            ]
        },
        {
            "id": "adv_218",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `__eq__` method in a class?",
            "expected_keywords": [
                "output",
                "define",
                "you",
                "method",
                "objects",
                "other",
                "isinstance",
                "value",
                "two",
                "custom",
                "allows",
                "python",
                "class",
                "equality",
                "true",
                "example",
                "print",
                "if",
                "compare",
                "self",
                "false",
                "operator",
                "def",
                "return",
                "behavior",
                "myclass",
                "used"
            ]
        },
        {
            "id": "adv_219",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast synchronous and asynchronous programming?",
            "expected_keywords": [
                "concurrently",
                "applications",
                "especially",
                "asynchronous",
                "complete",
                "executes",
                "performance",
                "bound",
                "other",
                "until",
                "improve",
                "o",
                "allows",
                "involving",
                "sequentially",
                "operations",
                "programming",
                "tasks",
                "completed",
                "execution",
                "blocking",
                "synchronous",
                "subsequent",
                "run",
                "task",
                "waiting",
                "enabling",
                "responsiveness",
                "current",
                "i",
                "time",
                "consuming",
                "while",
                "those"
            ]
        },
        {
            "id": "adv_220",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a decorator that takes arguments?",
            "expected_keywords": [
                "you",
                "arguments",
                "args",
                "f",
                "returns",
                "func",
                "wrapper",
                "takes",
                "called",
                "python",
                "world",
                "function",
                "defining",
                "example",
                "print",
                "decorator",
                "def",
                "factory",
                "return",
                "kwargs",
                "actual",
                "implement",
                "hello"
            ]
        },
        {
            "id": "adv_221",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `asyncio` module?",
            "expected_keywords": [
                "applications",
                "synchronization",
                "asynchronous",
                "you",
                "await",
                "async",
                "bound",
                "asyncio",
                "concurrent",
                "loops",
                "o",
                "development",
                "allows",
                "coroutines",
                "using",
                "python",
                "code",
                "write",
                "programming",
                "non",
                "tasks",
                "provides",
                "includes",
                "blocking",
                "primitives",
                "enabling",
                "building",
                "i",
                "efficiently",
                "keywords",
                "module",
                "support",
                "event",
                "handle"
            ]
        },
        {
            "id": "adv_222",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How can you handle multiple exceptions in a single `except` block?",
            "expected_keywords": [
                "you",
                "try",
                "pass",
                "f",
                "multiple",
                "occurred",
                "python",
                "code",
                "typeerror",
                "single",
                "valueerror",
                "e",
                "error",
                "example",
                "block",
                "raise",
                "print",
                "tuple",
                "specifying",
                "types",
                "except",
                "exceptions",
                "handle",
                "exception"
            ]
        },
        {
            "id": "adv_223",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast `__iter__` and `__next__`?",
            "expected_keywords": [
                "iteration",
                "define",
                "when",
                "each",
                "len",
                "result",
                "data",
                "returns",
                "else",
                "value",
                "called",
                "python",
                "initialized",
                "index",
                "class",
                "special",
                "object",
                "example",
                "raise",
                "print",
                "if",
                "self",
                "iterator",
                "def",
                "myiterator",
                "return",
                "behavior",
                "methods",
                "itself",
                "stopiteration",
                "next",
                "item",
                "used"
            ]
        },
        {
            "id": "adv_224",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How do you implement a simple REST API using Flask?",
            "expected_keywords": [
                "api",
                "flask",
                "import",
                "you",
                "json",
                "data",
                "http",
                "get",
                "jsonify",
                "value",
                "debug",
                "using",
                "python",
                "route",
                "key",
                "simple",
                "post",
                "app",
                "true",
                "defining",
                "example",
                "request",
                "if",
                "run",
                "def",
                "routes",
                "return",
                "methods",
                "implement",
                "handling",
                "rest"
            ]
        },
        {
            "id": "adv_225",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `argparse` module?",
            "expected_keywords": [
                "define",
                "import",
                "parser",
                "you",
                "parse",
                "arguments",
                "nargs",
                "accumulator",
                "interfaces",
                "script",
                "create",
                "args",
                "argparse",
                "expected",
                "help",
                "accumulate",
                "description",
                "messages",
                "allows",
                "type",
                "line",
                "them",
                "user",
                "python",
                "command",
                "friendly",
                "argumentparser",
                "dest",
                "some",
                "integers",
                "passed",
                "default",
                "const",
                "max",
                "provides",
                "values",
                "error",
                "example",
                "metavar",
                "print",
                "access",
                "find",
                "way",
                "int",
                "built",
                "action",
                "module",
                "their",
                "helps",
                "handling",
                "sum",
                "integer",
                "handle",
                "n",
                "process"
            ]
        },
        {
            "id": "adv_226",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of the `__str__` and `__repr__` methods?",
            "expected_keywords": [
                "provide",
                "str",
                "output",
                "define",
                "method",
                "objects",
                "unambiguous",
                "string",
                "user",
                "python",
                "friendly",
                "class",
                "object",
                "repr",
                "example",
                "print",
                "representations",
                "while",
                "obj",
                "self",
                "def",
                "return",
                "methods",
                "myclass",
                "representation",
                "used",
                "recreate"
            ]
        },
        {
            "id": "adv_227",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you implement a stack using a list in Python?",
            "expected_keywords": [
                "output",
                "elements",
                "stack",
                "push",
                "you",
                "append",
                "using",
                "implement",
                "method",
                "python",
                "onto",
                "list",
                "pop",
                "example",
                "print",
                "remove"
            ]
        },
        {
            "id": "adv_228",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast `is` and `==` in Python?",
            "expected_keywords": [
                "output",
                "z",
                "references",
                "objects",
                "value",
                "same",
                "two",
                "identity",
                "they",
                "python",
                "meaning",
                "y",
                "point",
                "object",
                "memory",
                "equality",
                "values",
                "true",
                "example",
                "checks",
                "print",
                "if",
                "compare",
                "false",
                "purposes",
                "x",
                "but",
                "used",
                "different"
            ]
        },
        {
            "id": "adv_229",
            "category": "python",
            "difficulty": "advanced",
            "question": "What are list comprehensions, and how do they work?",
            "expected_keywords": [
                "provide",
                "optional",
                "output",
                "consist",
                "clauses",
                "create",
                "loops",
                "they",
                "comprehensions",
                "using",
                "python",
                "efficient",
                "clause",
                "example",
                "list",
                "expression",
                "print",
                "if",
                "range",
                "way",
                "lists",
                "x",
                "squares",
                "concise",
                "than",
                "readable",
                "followed",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_230",
            "category": "python",
            "difficulty": "advanced",
            "question": "How do you merge two dictionaries in Python?",
            "expected_keywords": [
                "output",
                "two",
                "b",
                "merge",
                "you",
                "update",
                "using",
                "method",
                "example",
                "python",
                "syntax",
                "c",
                "print",
                "dictionaries"
            ]
        },
        {
            "id": "adv_231",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the `yield` keyword?",
            "expected_keywords": [
                "sequences",
                "storing",
                "when",
                "yield",
                "generating",
                "create",
                "generator",
                "returns",
                "loop",
                "value",
                "iterated",
                "once",
                "them",
                "called",
                "python",
                "generators",
                "passed",
                "one",
                "object",
                "memory",
                "values",
                "function",
                "all",
                "without",
                "keyword",
                "iterator",
                "large",
                "useful",
                "retrieve",
                "time",
                "next",
                "used"
            ]
        },
        {
            "id": "adv_232",
            "category": "python",
            "difficulty": "advanced",
            "question": "How can you sort a list of dictionaries by a specific key?",
            "expected_keywords": [
                "parameter",
                "specific",
                "output",
                "you",
                "bob",
                "sorted",
                "charlie",
                "using",
                "python",
                "lambda",
                "key",
                "function",
                "alice",
                "sort",
                "example",
                "list",
                "print",
                "name",
                "age",
                "dictionaries",
                "x"
            ]
        },
        {
            "id": "adv_233",
            "category": "python",
            "difficulty": "advanced",
            "question": "How would you find the factorial of a number using recursion in Python?",
            "expected_keywords": [
                "find",
                "factorial",
                "recursion",
                "def",
                "else",
                "output",
                "number",
                "return",
                "follows",
                "you",
                "using",
                "python",
                "print",
                "if",
                "n"
            ]
        },
        {
            "id": "adv_234",
            "category": "python",
            "difficulty": "advanced",
            "question": "Write a function to find the intersection of two lists in Python.",
            "expected_keywords": [
                "find",
                "intersection",
                "def",
                "lists",
                "output",
                "two",
                "return",
                "set",
                "you",
                "using",
                "operations",
                "example",
                "python",
                "list",
                "print"
            ]
        },
        {
            "id": "adv_235",
            "category": "python",
            "difficulty": "advanced",
            "question": "How would you check if two strings are anagrams of each other in Python? Write the code for it.",
            "expected_keywords": [
                "output",
                "listen",
                "each",
                "check",
                "you",
                "sorting",
                "other",
                "comparing",
                "two",
                "sorted",
                "anagrams",
                "them",
                "python",
                "silent",
                "world",
                "true",
                "example",
                "print",
                "if",
                "false",
                "strings",
                "def",
                "return",
                "versions",
                "hello"
            ]
        },
        {
            "id": "adv_236",
            "category": "python",
            "difficulty": "advanced",
            "question": "type == object. What is the result of the execution of the following code: \n\n>>> isinstance(type, object)\n>>> isinstance(object, type)\n>>> isinstance(object, object)\n>>> isinstance(type, type)",
            "expected_keywords": [
                "isinstance",
                "object",
                "output",
                "execution",
                "true",
                "type",
                "python",
                "following",
                "result",
                "code"
            ]
        },
        {
            "id": "adv_237",
            "category": "python",
            "difficulty": "advanced",
            "question": "Empty booleans: What is the result of the execution of the following code:\n\n>>> any([])\n>>> all([])",
            "expected_keywords": [
                "output",
                "execution",
                "any",
                "all",
                "true",
                "python",
                "following",
                "result",
                "code",
                "false"
            ]
        },
        {
            "id": "adv_238",
            "category": "python",
            "difficulty": "advanced",
            "question": "Discuss the result of the execution of the following code:\n\n>>> x = 5\n>>> y = 5\n>>> x is y",
            "expected_keywords": [
                "output",
                "small",
                "cached",
                "result",
                "same",
                "python",
                "y",
                "code",
                "integers",
                "object",
                "execution",
                "memory",
                "so",
                "refer",
                "true",
                "because",
                "reused",
                "between",
                "typically",
                "x",
                "following"
            ]
        },
        {
            "id": "adv_239",
            "category": "python",
            "difficulty": "advanced",
            "question": "Roundabout: What is the result of the execution of the following code?\n\n>>> round(7 / 2)\n>>> round(3 / 2)\n>>> round(5 / 2)",
            "expected_keywords": [
                "output",
                "nearest",
                "execution",
                "integer",
                "function",
                "rounds",
                "python",
                "if",
                "following",
                "result",
                "code",
                "round",
                "fractional",
                "part",
                "exactly",
                "even"
            ]
        },
        {
            "id": "adv_240",
            "category": "python",
            "difficulty": "advanced",
            "question": "Instance first! What will this code print into the console?\n\n```python\nclass A:\n    answer = 42\n    def __init__(self):\n        self.answer = 21\n        self.__add__ = lambda x, y: x.answer + y\n    def __add__(self, y):\n        return self.answer - y\n\nprint(A() + 5)\n```",
            "expected_keywords": [
                "console",
                "addition",
                "so",
                "executed",
                "answer",
                "method",
                "defined",
                "operation",
                "resulting",
                "y",
                "print",
                "code",
                "used",
                "class",
                "self"
            ]
        },
        {
            "id": "adv_241",
            "category": "python",
            "difficulty": "advanced",
            "question": "Explain the significance of feature selection in machine learning. And explain how heatmaps can be used for it.",
            "expected_keywords": [
                "ones",
                "features",
                "highly",
                "heatmap",
                "target",
                "selection",
                "correlated",
                "irrelevant",
                "performance",
                "lead",
                "improve",
                "significant",
                "relevant",
                "one",
                "redundant",
                "removing",
                "interpretability",
                "improved",
                "correlation",
                "accuracy",
                "faster",
                "feature",
                "variable",
                "select",
                "because",
                "overfitting",
                "heatmaps",
                "most",
                "between",
                "training",
                "learning",
                "model",
                "identify",
                "selecting",
                "informative",
                "machine",
                "s",
                "helps",
                "better",
                "reduced",
                "times",
                "analyzing",
                "used",
                "visualizing"
            ]
        },
        {
            "id": "adv_242",
            "category": "python",
            "difficulty": "expert",
            "question": "Compare and contrast a categorical variable and a continuous variable.",
            "expected_keywords": [
                "measurable",
                "variables",
                "statistical",
                "frequency",
                "discrete",
                "categorical",
                "continuous",
                "gender",
                "possible",
                "value",
                "using",
                "like",
                "categories",
                "measures",
                "finite",
                "analyzed",
                "take",
                "values",
                "quantities",
                "groups",
                "standard",
                "height",
                "range",
                "counts",
                "proportions",
                "typically",
                "such",
                "color",
                "number",
                "any",
                "represent",
                "deviation",
                "weight",
                "mean",
                "within",
                "while",
                "median"
            ]
        },
        {
            "id": "adv_243",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the Adam optimizer.",
            "expected_keywords": [
                "sparse",
                "parameter",
                "noisy",
                "gradients",
                "adapts",
                "each",
                "optimizers",
                "convergence",
                "data",
                "advantages",
                "second",
                "performance",
                "other",
                "two",
                "significant",
                "rate",
                "robustness",
                "adam",
                "optimizer",
                "leading",
                "its",
                "ability",
                "combines",
                "moments",
                "faster",
                "rmsprop",
                "because",
                "first",
                "based",
                "adagrad",
                "handle",
                "learning",
                "due",
                "machine",
                "popular",
                "better",
                "efficiency",
                "used",
                "widely"
            ]
        },
        {
            "id": "adv_244",
            "category": "python",
            "difficulty": "advanced",
            "question": "Solve this derevative: f(x) = 3x^2 + 2x + 1 and give the answer",
            "expected_keywords": [
                "x",
                "f"
            ]
        },
        {
            "id": "adv_245",
            "category": "ml",
            "difficulty": "advanced",
            "question": "The equation of sigmoid function is?",
            "expected_keywords": [
                "x",
                "sigmoid",
                "function",
                "e",
                "equation"
            ]
        },
        {
            "id": "adv_246",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Why is binary cross entropy used in logistic regression and not mean squared error?",
            "expected_keywords": [
                "target",
                "suitable",
                "continuous",
                "other",
                "cross",
                "entropy",
                "where",
                "two",
                "classes",
                "label",
                "penalizes",
                "classification",
                "binary",
                "class",
                "problems",
                "variable",
                "specifically",
                "error",
                "because",
                "predicted",
                "based",
                "between",
                "designed",
                "squared",
                "logistic",
                "model",
                "probability",
                "actual",
                "hand",
                "mean",
                "difference",
                "used",
                "more",
                "regression"
            ]
        },
        {
            "id": "adv_247",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Give 2 examples of High Variance Low Bias Model",
            "expected_keywords": [
                "k",
                "nearest",
                "trees",
                "decision",
                "neighbors",
                "nn"
            ]
        },
        {
            "id": "adv_248",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Does the random state of training and testing data affect the performance of a machine learning model?",
            "expected_keywords": [
                "affect",
                "small",
                "especially",
                "sets",
                "yes",
                "how",
                "ensures",
                "split",
                "data",
                "performance",
                "lead",
                "determines",
                "splits",
                "evaluation",
                "consistency",
                "setting",
                "states",
                "state",
                "reproducibility",
                "dataset",
                "imbalanced",
                "if",
                "testing",
                "training",
                "learning",
                "model",
                "machine",
                "s",
                "random",
                "different"
            ]
        },
        {
            "id": "adv_249",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Discuss the working of KNN imputer?",
            "expected_keywords": [
                "impute",
                "k",
                "calculates",
                "distance",
                "features",
                "average",
                "g",
                "method",
                "euclidean",
                "knn",
                "algorithm",
                "continuous",
                "data",
                "categorical",
                "points",
                "imputer",
                "neighbors",
                "using",
                "missing",
                "dataset",
                "feature",
                "values",
                "e",
                "based",
                "between",
                "replaces",
                "specified",
                "nearest",
                "useful",
                "selects",
                "handling",
                "metric",
                "used",
                "datasets"
            ]
        },
        {
            "id": "adv_250",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working procedure of the XGBoost model.",
            "expected_keywords": [
                "works",
                "iteratively",
                "errors",
                "trees",
                "build",
                "learners",
                "weak",
                "each",
                "method",
                "algorithm",
                "previous",
                "minimizing",
                "correcting",
                "performance",
                "uses",
                "optimize",
                "ensemble",
                "decision",
                "improve",
                "prevent",
                "generalization",
                "collection",
                "includes",
                "extreme",
                "function",
                "xgboost",
                "gradient",
                "regularization",
                "adding",
                "techniques",
                "overfitting",
                "boosting",
                "tree",
                "loss",
                "learning",
                "model",
                "s",
                "predictive",
                "strong"
            ]
        },
        {
            "id": "adv_251",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast precision and recall?",
            "expected_keywords": [
                "instances",
                "recall",
                "make",
                "correct",
                "focuses",
                "performance",
                "positive",
                "measure",
                "total",
                "coverage",
                "metrics",
                "classification",
                "evaluation",
                "precision",
                "tasks",
                "ability",
                "accuracy",
                "true",
                "indicating",
                "predictions",
                "ratio",
                "all",
                "model",
                "number",
                "s",
                "actual",
                "capture",
                "used",
                "while"
            ]
        },
        {
            "id": "adv_252",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Discuss hyperparameters in machine learning, and explain what are the main hyperparameters in Random Forest Classifier?",
            "expected_keywords": [
                "parameter",
                "affect",
                "trees",
                "required",
                "features",
                "when",
                "each",
                "split",
                "hyperparameter",
                "main",
                "during",
                "performance",
                "include",
                "looking",
                "node",
                "decision",
                "minimum",
                "samples",
                "classifier",
                "some",
                "maximum",
                "trained",
                "remains",
                "control",
                "set",
                "before",
                "forest",
                "consider",
                "depth",
                "constant",
                "tree",
                "training",
                "learning",
                "model",
                "number",
                "machine",
                "s",
                "behavior",
                "best",
                "hyperparameters",
                "random",
                "process"
            ]
        },
        {
            "id": "adv_253",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the loss function in machine learning? Why do most algorithms prefer Gradient Descent insted of a closed math formula?",
            "expected_keywords": [
                "guides",
                "models",
                "iteratively",
                "how",
                "convergence",
                "updating",
                "performance",
                "form",
                "prefer",
                "optimization",
                "measure",
                "descent",
                "allows",
                "efficient",
                "dimensional",
                "generalization",
                "algorithms",
                "leading",
                "feedback",
                "trained",
                "closed",
                "parameters",
                "faster",
                "feature",
                "values",
                "function",
                "providing",
                "gradient",
                "because",
                "predicted",
                "most",
                "based",
                "between",
                "scalable",
                "loss",
                "solutions",
                "learning",
                "model",
                "high",
                "large",
                "machine",
                "s",
                "actual",
                "better",
                "well",
                "spaces",
                "quantifies",
                "difference",
                "used",
                "datasets",
                "performing",
                "more",
                "process"
            ]
        },
        {
            "id": "adv_254",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast parametric and non-parametric models.",
            "expected_keywords": [
                "specific",
                "models",
                "k",
                "trees",
                "often",
                "underlying",
                "flexible",
                "data",
                "assume",
                "include",
                "form",
                "complexity",
                "having",
                "decision",
                "fixed",
                "linear",
                "simpler",
                "neighbors",
                "complex",
                "parametric",
                "non",
                "intensive",
                "parameters",
                "faster",
                "adapt",
                "function",
                "overfitting",
                "examples",
                "logistic",
                "nearest",
                "number",
                "s",
                "patterns",
                "prone",
                "computationally",
                "but",
                "capture",
                "more",
                "while",
                "do",
                "regression"
            ]
        },
        {
            "id": "adv_255",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the validation set in machine learning.",
            "expected_keywords": [
                "selection",
                "subset",
                "data",
                "during",
                "performance",
                "preventing",
                "allows",
                "metrics",
                "evaluation",
                "early",
                "validation",
                "dataset",
                "set",
                "providing",
                "unseen",
                "overfitting",
                "unbiased",
                "based",
                "training",
                "model",
                "tuning",
                "selecting",
                "s",
                "best",
                "helps",
                "hyperparameters",
                "stopping",
                "used",
                "evaluate"
            ]
        },
        {
            "id": "adv_256",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the kernel trick in support vector machines.",
            "expected_keywords": [
                "space",
                "operate",
                "boundaries",
                "vector",
                "trick",
                "svm",
                "computing",
                "products",
                "common",
                "algorithm",
                "transformed",
                "data",
                "enables",
                "points",
                "decision",
                "kernel",
                "linear",
                "basis",
                "allows",
                "using",
                "explicitly",
                "functions",
                "dimensional",
                "compute",
                "non",
                "feature",
                "rbf",
                "function",
                "inner",
                "between",
                "polynomial",
                "without",
                "find",
                "high",
                "machines",
                "support",
                "coordinates",
                "radial",
                "include"
            ]
        },
        {
            "id": "adv_257",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Discuss the role of the optimizer in training a neural network.",
            "expected_keywords": [
                "gradients",
                "how",
                "affects",
                "speed",
                "common",
                "minimize",
                "optimizers",
                "convergence",
                "weights",
                "updating",
                "neural",
                "quality",
                "descent",
                "determines",
                "adjusted",
                "final",
                "stochastic",
                "choice",
                "adam",
                "optimizer",
                "sgd",
                "function",
                "rmsprop",
                "gradient",
                "based",
                "respect",
                "loss",
                "responsible",
                "training",
                "model",
                "s",
                "network",
                "include"
            ]
        },
        {
            "id": "adv_258",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast one-hot encoding and label encoding.",
            "expected_keywords": [
                "assigns",
                "each",
                "suitable",
                "categorical",
                "data",
                "result",
                "meaningful",
                "numerical",
                "label",
                "columns",
                "exist",
                "presence",
                "binary",
                "dimensional",
                "unique",
                "order",
                "one",
                "format",
                "indicating",
                "otherwise",
                "techniques",
                "inherent",
                "while",
                "without",
                "ordinal",
                "creates",
                "high",
                "encoding",
                "category",
                "relationships",
                "hot",
                "integer",
                "introduce",
                "nominal",
                "converting"
            ]
        },
        {
            "id": "adv_259",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of early stopping in training neural networks.",
            "expected_keywords": [
                "generalizes",
                "when",
                "technique",
                "monitoring",
                "data",
                "performance",
                "neural",
                "optimal",
                "improving",
                "early",
                "prevent",
                "validation",
                "stops",
                "set",
                "unseen",
                "regularization",
                "overfitting",
                "ensuring",
                "training",
                "without",
                "model",
                "involves",
                "number",
                "networks",
                "s",
                "epochs",
                "helps",
                "well",
                "finding",
                "stopping",
                "used",
                "process"
            ]
        },
        {
            "id": "adv_260",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast generative adversarial networks (GANs) and variational autoencoders (VAEs).",
            "expected_keywords": [
                "space",
                "provide",
                "gans",
                "models",
                "distinguishing",
                "use",
                "each",
                "consist",
                "generating",
                "new",
                "map",
                "variational",
                "discriminator",
                "data",
                "fake",
                "create",
                "creating",
                "generator",
                "other",
                "quality",
                "latent",
                "known",
                "samples",
                "encoder",
                "ensure",
                "compete",
                "real",
                "probabilistic",
                "easier",
                "generative",
                "reconstruct",
                "regularization",
                "term",
                "train",
                "input",
                "between",
                "difficult",
                "high",
                "produce",
                "decoder",
                "networks",
                "against",
                "adversarial",
                "but",
                "vaes",
                "both",
                "autoencoders",
                "smoothness",
                "lower",
                "framework",
                "used",
                "while"
            ]
        },
        {
            "id": "adv_261",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the learning rate schedule.",
            "expected_keywords": [
                "response",
                "converge",
                "conditions",
                "common",
                "convergence",
                "during",
                "performance",
                "help",
                "step",
                "improve",
                "schedule",
                "rate",
                "predefined",
                "validation",
                "rates",
                "stuck",
                "avoid",
                "local",
                "exponential",
                "minima",
                "strategy",
                "faster",
                "set",
                "certain",
                "schedules",
                "based",
                "changing",
                "training",
                "designed",
                "learning",
                "model",
                "involves",
                "such",
                "getting",
                "number",
                "epochs",
                "well",
                "adjusting",
                "adaptive",
                "decay",
                "include"
            ]
        },
        {
            "id": "adv_262",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of data augmentation in machine learning.",
            "expected_keywords": [
                "variations",
                "technique",
                "collecting",
                "common",
                "data",
                "include",
                "various",
                "applying",
                "noise",
                "rotation",
                "improve",
                "where",
                "augmentation",
                "scaling",
                "generalization",
                "tasks",
                "ability",
                "dataset",
                "vision",
                "overfitting",
                "flipping",
                "techniques",
                "adding",
                "challenging",
                "particularly",
                "size",
                "amounts",
                "training",
                "labeled",
                "model",
                "reducing",
                "computer",
                "large",
                "s",
                "exposing",
                "useful",
                "helps",
                "increase",
                "diversity",
                "existing",
                "used",
                "different",
                "transformations"
            ]
        },
        {
            "id": "adv_263",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast shallow and deep neural networks.",
            "expected_keywords": [
                "small",
                "layers",
                "features",
                "often",
                "resources",
                "many",
                "optimizers",
                "data",
                "dropout",
                "performance",
                "deep",
                "neural",
                "two",
                "three",
                "improve",
                "simpler",
                "hierarchical",
                "like",
                "complex",
                "generalization",
                "advanced",
                "one",
                "faster",
                "hidden",
                "overfitting",
                "benefit",
                "techniques",
                "regularization",
                "train",
                "shallow",
                "require",
                "computational",
                "typically",
                "model",
                "number",
                "networks",
                "patterns",
                "prone",
                "than",
                "but",
                "capture",
                "struggle",
                "while",
                "more",
                "relationships"
            ]
        },
        {
            "id": "adv_264",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the gradient descent algorithm.",
            "expected_keywords": [
                "iteratively",
                "calculates",
                "minimize",
                "algorithm",
                "updating",
                "descent",
                "optimal",
                "significant",
                "direction",
                "parameters",
                "values",
                "function",
                "gradient",
                "fit",
                "because",
                "error",
                "predicted",
                "respect",
                "negative",
                "between",
                "loss",
                "moves",
                "find",
                "learning",
                "model",
                "reducing",
                "machine",
                "s",
                "best",
                "helps",
                "actual",
                "finding",
                "used"
            ]
        },
        {
            "id": "adv_265",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Discuss the role of the bias term in a neural network.",
            "expected_keywords": [
                "parameter",
                "output",
                "additional",
                "ensures",
                "data",
                "pass",
                "neural",
                "origin",
                "learn",
                "activation",
                "shifting",
                "allows",
                "functions",
                "complex",
                "values",
                "bias",
                "function",
                "providing",
                "fit",
                "term",
                "input",
                "model",
                "flexibility",
                "do",
                "independently",
                "network",
                "patterns",
                "represent",
                "better",
                "helps",
                "adjusting",
                "more"
            ]
        },
        {
            "id": "adv_266",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the F1 score in model evaluation.",
            "expected_keywords": [
                "especially",
                "recall",
                "balance",
                "considering",
                "performance",
                "distribution",
                "where",
                "significant",
                "metrics",
                "equal",
                "score",
                "classification",
                "evaluation",
                "precision",
                "positives",
                "class",
                "tasks",
                "provides",
                "making",
                "imbalanced",
                "because",
                "harmonic",
                "false",
                "assessing",
                "between",
                "model",
                "giving",
                "s",
                "negatives",
                "useful",
                "helps",
                "weight",
                "mean",
                "both",
                "metric",
                "cases"
            ]
        },
        {
            "id": "adv_267",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of learning rate decay.",
            "expected_keywords": [
                "far",
                "when",
                "make",
                "updates",
                "ensures",
                "convergence",
                "algorithm",
                "initially",
                "stable",
                "overshooting",
                "smaller",
                "descent",
                "larger",
                "optimal",
                "significant",
                "improving",
                "allows",
                "rate",
                "minimum",
                "solution",
                "gradient",
                "avoiding",
                "because",
                "gradually",
                "learning",
                "reducing",
                "model",
                "gets",
                "helps",
                "time",
                "closer",
                "decay",
                "more"
            ]
        },
        {
            "id": "adv_268",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the output layer in a neural network.",
            "expected_keywords": [
                "problem",
                "output",
                "layers",
                "structure",
                "sigmoid",
                "softmax",
                "applies",
                "solved",
                "being",
                "neural",
                "layer",
                "activation",
                "multi",
                "type",
                "takes",
                "final",
                "using",
                "classification",
                "binary",
                "class",
                "generate",
                "function",
                "hidden",
                "predictions",
                "processed",
                "model",
                "such",
                "s",
                "depend",
                "network",
                "produces",
                "information"
            ]
        },
        {
            "id": "adv_269",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast soft margin and hard margin in support vector machines.",
            "expected_keywords": [
                "noisy",
                "errors",
                "vector",
                "svm",
                "data",
                "no",
                "soft",
                "introducing",
                "hard",
                "minimizing",
                "tolerance",
                "requires",
                "other",
                "lead",
                "svms",
                "points",
                "slack",
                "allows",
                "margin",
                "classification",
                "linearly",
                "misclassification",
                "trade",
                "some",
                "non",
                "variable",
                "classified",
                "providing",
                "overfitting",
                "if",
                "all",
                "between",
                "machines",
                "better",
                "support",
                "robust",
                "than",
                "hand",
                "correctly",
                "separable",
                "more",
                "handle",
                "maximizing"
            ]
        },
        {
            "id": "adv_270",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Discuss the role of the hidden layers in a neural network.",
            "expected_keywords": [
                "output",
                "layers",
                "features",
                "each",
                "data",
                "neural",
                "learn",
                "layer",
                "activation",
                "intricate",
                "linearities",
                "functions",
                "complex",
                "non",
                "hidden",
                "capacity",
                "perform",
                "allowing",
                "computations",
                "input",
                "between",
                "weighted",
                "size",
                "consists",
                "intermediate",
                "extract",
                "model",
                "number",
                "s",
                "patterns",
                "network",
                "represent",
                "inputs",
                "relationships",
                "sum",
                "neurons",
                "determine",
                "apply"
            ]
        },
        {
            "id": "adv_271",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the ReLU activation function and why do we need leaky ReLU?",
            "expected_keywords": [
                "introduces",
                "problem",
                "become",
                "small",
                "needed",
                "zero",
                "convergence",
                "accelerates",
                "neural",
                "linearity",
                "directly",
                "positive",
                "where",
                "outputting",
                "preventing",
                "activation",
                "linear",
                "significant",
                "vanishing",
                "inactive",
                "slope",
                "non",
                "unit",
                "function",
                "otherwise",
                "gradient",
                "because",
                "addressing",
                "if",
                "input",
                "address",
                "negative",
                "rectified",
                "learning",
                "due",
                "leaky",
                "stop",
                "relu",
                "networks",
                "dying",
                "network",
                "helps",
                "inputs",
                "neurons",
                "becoming"
            ]
        },
        {
            "id": "adv_272",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast online learning and batch learning.",
            "expected_keywords": [
                "approaches",
                "models",
                "batch",
                "applications",
                "each",
                "updates",
                "resources",
                "new",
                "suitable",
                "flexible",
                "data",
                "static",
                "stable",
                "incrementally",
                "other",
                "requires",
                "lead",
                "two",
                "once",
                "using",
                "online",
                "efficient",
                "point",
                "cannot",
                "real",
                "memory",
                "dataset",
                "adapt",
                "making",
                "processed",
                "all",
                "accurate",
                "training",
                "computational",
                "changing",
                "learning",
                "model",
                "large",
                "machine",
                "time",
                "but",
                "hand",
                "entire",
                "more",
                "datasets",
                "while",
                "batches"
            ]
        },
        {
            "id": "adv_273",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of the K-fold cross-validation technique.",
            "expected_keywords": [
                "k",
                "each",
                "technique",
                "method",
                "dividing",
                "data",
                "performance",
                "folds",
                "cross",
                "significant",
                "equal",
                "estimate",
                "using",
                "evaluating",
                "evaluation",
                "validation",
                "sized",
                "provides",
                "dataset",
                "reliable",
                "set",
                "bias",
                "providing",
                "unseen",
                "because",
                "training",
                "fold",
                "variance",
                "learning",
                "model",
                "involves",
                "reducing",
                "machine",
                "s",
                "helps",
                "robust",
                "time",
                "remaining",
                "times",
                "different",
                "more"
            ]
        },
        {
            "id": "adv_274",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the significance of splitting a given dataset into training and validation data.",
            "expected_keywords": [
                "ensures",
                "data",
                "performance",
                "splitting",
                "assess",
                "preventing",
                "significant",
                "allows",
                "evaluation",
                "validation",
                "generalization",
                "ability",
                "dataset",
                "unseen",
                "because",
                "overfitting",
                "unbiased",
                "train",
                "tune",
                "performs",
                "training",
                "model",
                "s",
                "helps",
                "hyperparameters",
                "well",
                "given",
                "used",
                "while"
            ]
        },
        {
            "id": "adv_275",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain some methods to handle missing values in data.",
            "expected_keywords": [
                "regression",
                "statistical",
                "rows",
                "small",
                "trees",
                "knn",
                "replacing",
                "data",
                "categorical",
                "creating",
                "decision",
                "columns",
                "imputer",
                "using",
                "like",
                "measures",
                "imputation",
                "some",
                "mode",
                "advanced",
                "algorithms",
                "natively",
                "removing",
                "missing",
                "deletion",
                "values",
                "techniques",
                "if",
                "such",
                "learning",
                "effective",
                "separate",
                "machine",
                "methods",
                "category",
                "mean",
                "approach",
                "amount",
                "more",
                "handle",
                "median",
                "include"
            ]
        },
        {
            "id": "adv_276",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast k-means and the KNN algorithm.",
            "expected_keywords": [
                "k",
                "assigns",
                "within",
                "knn",
                "algorithm",
                "data",
                "minimizing",
                "clustering",
                "label",
                "pattern",
                "neighbors",
                "supervised",
                "classification",
                "class",
                "point",
                "algorithms",
                "tasks",
                "partitions",
                "its",
                "cluster",
                "unsupervised",
                "based",
                "similarity",
                "while",
                "variance",
                "learning",
                "serve",
                "purposes",
                "nearest",
                "used",
                "means",
                "machine",
                "but",
                "both",
                "majority",
                "clusters",
                "different",
                "discovery",
                "regression"
            ]
        },
        {
            "id": "adv_277",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Discuss Linear Discriminant Analysis.",
            "expected_keywords": [
                "space",
                "combination",
                "visualize",
                "features",
                "when",
                "maximizing",
                "algorithm",
                "data",
                "minimizing",
                "gaussian",
                "analysis",
                "distribution",
                "two",
                "classes",
                "linear",
                "projects",
                "supervised",
                "classification",
                "linearly",
                "classify",
                "dimensional",
                "class",
                "dimensionality",
                "separates",
                "follows",
                "easier",
                "lda",
                "discriminant",
                "making",
                "onto",
                "particularly",
                "between",
                "find",
                "variance",
                "learning",
                "reduction",
                "useful",
                "best",
                "lower",
                "separable",
                "aims",
                "used",
                "within",
                "more"
            ]
        },
        {
            "id": "adv_278",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How can we visualize high-dimensional data in 2D?",
            "expected_keywords": [
                "visualize",
                "sne",
                "uniform",
                "projection",
                "structure",
                "approximation",
                "we",
                "t",
                "data",
                "analysis",
                "pca",
                "manifold",
                "distributed",
                "component",
                "using",
                "reduce",
                "stochastic",
                "dimensions",
                "dimensional",
                "neighbor",
                "embedding",
                "visualization",
                "allowing",
                "techniques",
                "preserving",
                "these",
                "principal",
                "such",
                "high",
                "effective",
                "reduction",
                "umap",
                "number",
                "plots",
                "dimensionality",
                "while",
                "relationships"
            ]
        },
        {
            "id": "adv_279",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the reason behind the curse of dimensionality?",
            "expected_keywords": [
                "space",
                "sparse",
                "when",
                "affects",
                "achieve",
                "organizing",
                "data",
                "performance",
                "sparsity",
                "meaningful",
                "requires",
                "various",
                "arise",
                "they",
                "exponentially",
                "dimensions",
                "dimensional",
                "algorithms",
                "dimensionality",
                "curse",
                "available",
                "results",
                "reliable",
                "making",
                "makes",
                "phenomena",
                "increases",
                "difficult",
                "find",
                "learning",
                "high",
                "also",
                "number",
                "machine",
                "generalize",
                "patterns",
                "well",
                "spaces",
                "analyzing",
                "more",
                "refers",
                "struggle",
                "volume"
            ]
        },
        {
            "id": "adv_280",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Which metric is more robust to outliers: MAE, MSE, or RMSE?",
            "expected_keywords": [
                "mse",
                "errors",
                "calculates",
                "contrast",
                "mae",
                "average",
                "differences",
                "compared",
                "larger",
                "rmse",
                "equal",
                "them",
                "square",
                "values",
                "absolute",
                "making",
                "error",
                "outliers",
                "predicted",
                "all",
                "between",
                "sensitive",
                "gives",
                "root",
                "squared",
                "giving",
                "actual",
                "robust",
                "weight",
                "mean",
                "more"
            ]
        },
        {
            "id": "adv_281",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast content-based and collaborative filtering in recommendation systems.",
            "expected_keywords": [
                "provide",
                "relies",
                "problem",
                "explicit",
                "features",
                "does",
                "new",
                "start",
                "interactions",
                "behaviors",
                "other",
                "similar",
                "struggle",
                "user",
                "content",
                "cold",
                "suffer",
                "past",
                "users",
                "recommends",
                "items",
                "limited",
                "recommendations",
                "diverse",
                "based",
                "preferences",
                "collaborative",
                "require",
                "s",
                "well",
                "but",
                "hand",
                "filtering",
                "item",
                "diversity",
                "characteristics",
                "handle",
                "while"
            ]
        },
        {
            "id": "adv_282",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the null hypothesis in a linear regression problem?",
            "expected_keywords": [
                "problem",
                "variables",
                "zero",
                "least",
                "no",
                "words",
                "hypothesis",
                "null",
                "other",
                "linear",
                "relationship",
                "significant",
                "equal",
                "meaning",
                "states",
                "one",
                "coefficients",
                "there",
                "variable",
                "between",
                "typically",
                "alternative",
                "independent",
                "dependent",
                "regression"
            ]
        },
        {
            "id": "adv_283",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast L1 and L2 regularization in machine learning.",
            "expected_keywords": [
                "lasso",
                "does",
                "benefits",
                "zero",
                "selection",
                "penalty",
                "sparsity",
                "promoting",
                "promote",
                "ridge",
                "preventing",
                "simpler",
                "some",
                "coefficients",
                "results",
                "combines",
                "feature",
                "values",
                "absolute",
                "function",
                "regularization",
                "overfitting",
                "term",
                "driving",
                "loss",
                "adds",
                "squared",
                "model",
                "reducing",
                "elastic",
                "net",
                "large",
                "leverage",
                "multicollinearity",
                "methods",
                "better",
                "but",
                "both",
                "handle"
            ]
        },
        {
            "id": "adv_284",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is overfitting in machine learning?",
            "expected_keywords": [
                "when",
                "occurs",
                "new",
                "data",
                "test",
                "mitigated",
                "noise",
                "cross",
                "poorly",
                "using",
                "early",
                "validation",
                "generalization",
                "its",
                "accuracy",
                "unseen",
                "overfitting",
                "regularization",
                "outliers",
                "resulting",
                "techniques",
                "performs",
                "training",
                "learns",
                "learning",
                "model",
                "high",
                "including",
                "too",
                "such",
                "machine",
                "pruning",
                "well",
                "poor",
                "but",
                "stopping",
                "overfitted"
            ]
        },
        {
            "id": "adv_285",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is a confusion matrix, and how is it used?",
            "expected_keywords": [
                "calculating",
                "areas",
                "recall",
                "understanding",
                "performance",
                "comparing",
                "various",
                "labels",
                "metrics",
                "score",
                "classification",
                "positives",
                "precision",
                "detailed",
                "class",
                "shows",
                "accuracy",
                "provides",
                "true",
                "confusion",
                "predicted",
                "false",
                "matrix",
                "model",
                "such",
                "identify",
                "number",
                "negatives",
                "s",
                "actual",
                "helps",
                "table",
                "improvement",
                "used",
                "specificity",
                "evaluate"
            ]
        },
        {
            "id": "adv_286",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast bagging and boosting.",
            "expected_keywords": [
                "models",
                "errors",
                "combine",
                "each",
                "reduces",
                "instances",
                "trains",
                "bootstrapping",
                "data",
                "created",
                "previous",
                "focusing",
                "performance",
                "other",
                "improves",
                "ensemble",
                "multiple",
                "improve",
                "properly",
                "less",
                "sequentially",
                "aggregating",
                "prevent",
                "powerful",
                "accuracy",
                "bias",
                "predictions",
                "averaging",
                "overfitting",
                "techniques",
                "boosting",
                "while",
                "if",
                "regularized",
                "training",
                "bagging",
                "subsets",
                "learning",
                "variance",
                "involves",
                "model",
                "giving",
                "independently",
                "parallelizable",
                "prone",
                "their",
                "helps",
                "weight",
                "misclassified",
                "hand",
                "but",
                "more",
                "different",
                "bootstrap"
            ]
        },
        {
            "id": "adv_287",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the significance of the activation function in a neural network? Explain how the sigmoid function acts as an activation function.",
            "expected_keywords": [
                "introduces",
                "problem",
                "output",
                "sigmoid",
                "suitable",
                "transforms",
                "data",
                "deep",
                "neural",
                "linearity",
                "learn",
                "optimization",
                "layer",
                "activation",
                "vanishing",
                "classification",
                "commonly",
                "binary",
                "complex",
                "passed",
                "suffer",
                "non",
                "tasks",
                "squashes",
                "function",
                "making",
                "gradient",
                "allowing",
                "based",
                "range",
                "weighted",
                "between",
                "smooth",
                "however",
                "networks",
                "patterns",
                "network",
                "inputs",
                "next",
                "signal",
                "sum",
                "differentiable",
                "used",
                "relationships"
            ]
        },
        {
            "id": "adv_288",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is dropout in neural networks?",
            "expected_keywords": [
                "specific",
                "layers",
                "randomly",
                "features",
                "reduces",
                "technique",
                "forces",
                "units",
                "adaptation",
                "zero",
                "introducing",
                "during",
                "dropout",
                "neural",
                "proportion",
                "learn",
                "noise",
                "improve",
                "preventing",
                "applied",
                "co",
                "rate",
                "prevent",
                "setting",
                "generalization",
                "hidden",
                "regularization",
                "overfitting",
                "input",
                "training",
                "fraction",
                "model",
                "typically",
                "involves",
                "reliance",
                "networks",
                "network",
                "helps",
                "robust",
                "neurons",
                "drop",
                "used",
                "specifies",
                "more"
            ]
        },
        {
            "id": "adv_289",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast supervised and unsupervised learning.",
            "expected_keywords": [
                "exploratory",
                "regression",
                "features",
                "make",
                "paired",
                "new",
                "target",
                "common",
                "data",
                "unlabeled",
                "clustering",
                "other",
                "requires",
                "analysis",
                "learn",
                "where",
                "labels",
                "supervised",
                "classification",
                "discover",
                "dimensionality",
                "tasks",
                "provides",
                "work",
                "goal",
                "unsupervised",
                "unseen",
                "predictions",
                "outputs",
                "input",
                "accurate",
                "labeled",
                "training",
                "learning",
                "model",
                "involves",
                "structures",
                "reduction",
                "useful",
                "patterns",
                "inputs",
                "hand",
                "relationships",
                "more",
                "corresponding",
                "within",
                "while",
                "mapping",
                "include"
            ]
        },
        {
            "id": "adv_290",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is a ROC curve, and what does it represent?",
            "expected_keywords": [
                "summarizes",
                "graphical",
                "sensitivity",
                "settings",
                "higher",
                "roc",
                "performance",
                "discriminate",
                "positive",
                "various",
                "classes",
                "rate",
                "classification",
                "evaluating",
                "trade",
                "area",
                "single",
                "specificity",
                "ability",
                "provides",
                "insights",
                "values",
                "true",
                "indicating",
                "across",
                "characteristic",
                "operating",
                "false",
                "metric",
                "threshold",
                "between",
                "negative",
                "auc",
                "model",
                "s",
                "against",
                "helps",
                "better",
                "discrimination",
                "plots",
                "receiver",
                "representation",
                "curve",
                "different"
            ]
        },
        {
            "id": "adv_291",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the significance of feature scaling in machine learning?",
            "expected_keywords": [
                "k",
                "distance",
                "features",
                "vector",
                "ensures",
                "common",
                "zero",
                "convergence",
                "include",
                "performance",
                "optimization",
                "larger",
                "significant",
                "improving",
                "scaling",
                "enhances",
                "neighbors",
                "equally",
                "algorithms",
                "normalization",
                "unit",
                "feature",
                "gradient",
                "because",
                "dominating",
                "techniques",
                "based",
                "scales",
                "all",
                "range",
                "prevents",
                "variance",
                "learning",
                "model",
                "such",
                "nearest",
                "machines",
                "standardization",
                "machine",
                "helps",
                "contribute",
                "support",
                "mean",
                "process"
            ]
        },
        {
            "id": "adv_292",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a generative and a discriminative model.",
            "expected_keywords": [
                "mixture",
                "models",
                "regression",
                "features",
                "vector",
                "new",
                "target",
                "data",
                "focusing",
                "gaussian",
                "other",
                "learn",
                "joint",
                "distribution",
                "two",
                "decision",
                "classes",
                "samples",
                "them",
                "classification",
                "markov",
                "tasks",
                "missing",
                "generate",
                "variable",
                "generative",
                "hidden",
                "unsupervised",
                "perform",
                "allowing",
                "boundary",
                "input",
                "examples",
                "conditional",
                "between",
                "accurate",
                "typically",
                "learning",
                "logistic",
                "machines",
                "machine",
                "discriminative",
                "probability",
                "support",
                "types",
                "hand",
                "given",
                "handle",
                "while",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_293",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the significance of the learning rate in gradient descent?",
            "expected_keywords": [
                "appropriate",
                "how",
                "ensures",
                "convergence",
                "hyperparameter",
                "result",
                "during",
                "updating",
                "stable",
                "converges",
                "lead",
                "step",
                "optimization",
                "descent",
                "optimal",
                "determines",
                "rate",
                "quickly",
                "minimum",
                "low",
                "crucial",
                "efficient",
                "cause",
                "solution",
                "parameters",
                "overshoot",
                "faster",
                "instability",
                "gradient",
                "controls",
                "slowly",
                "size",
                "training",
                "learning",
                "model",
                "high",
                "slow",
                "choosing",
                "effective",
                "s",
                "achieving",
                "but",
                "more",
                "process"
            ]
        },
        {
            "id": "adv_294",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is transfer learning in deep learning?",
            "expected_keywords": [
                "approaches",
                "models",
                "required",
                "learned",
                "when",
                "resources",
                "new",
                "target",
                "common",
                "data",
                "deep",
                "allows",
                "source",
                "them",
                "using",
                "extractors",
                "trained",
                "limited",
                "leveraging",
                "feature",
                "related",
                "particularly",
                "task",
                "pre",
                "transfer",
                "computational",
                "training",
                "labeled",
                "learning",
                "tuning",
                "involves",
                "model",
                "reducing",
                "knowledge",
                "useful",
                "entire",
                "fine",
                "amount",
                "include"
            ]
        },
        {
            "id": "adv_295",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the vanishing gradient problem in deep learning?",
            "expected_keywords": [
                "problem",
                "become",
                "batch",
                "gradients",
                "small",
                "layers",
                "when",
                "sigmoid",
                "occurs",
                "updates",
                "pronounced",
                "many",
                "stalled",
                "during",
                "mitigate",
                "weights",
                "deep",
                "preventing",
                "vanishing",
                "activation",
                "properly",
                "using",
                "like",
                "functions",
                "normalization",
                "backpropagation",
                "parameters",
                "very",
                "function",
                "leads",
                "gradient",
                "certain",
                "techniques",
                "respect",
                "initializing",
                "loss",
                "tanh",
                "learning",
                "model",
                "slow",
                "networks",
                "s",
                "effectively",
                "relu",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_296",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the significance of batch normalization in neural networks?",
            "expected_keywords": [
                "batch",
                "each",
                "reduces",
                "technique",
                "sensitivity",
                "zero",
                "convergence",
                "higher",
                "neural",
                "layer",
                "improve",
                "regularizer",
                "shifting",
                "scaling",
                "allows",
                "accelerating",
                "improving",
                "using",
                "rates",
                "generalization",
                "acts",
                "normalization",
                "unit",
                "internal",
                "parameters",
                "covariate",
                "stabilizing",
                "training",
                "variance",
                "reducing",
                "learning",
                "involves",
                "initialization",
                "shift",
                "learnable",
                "model",
                "networks",
                "s",
                "helps",
                "inputs",
                "mean",
                "normalizing",
                "used",
                "followed",
                "process"
            ]
        },
        {
            "id": "adv_297",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a convolutional neural network (CNN) and a recurrent neural network (RNN).",
            "expected_keywords": [
                "layers",
                "features",
                "convolutional",
                "suitable",
                "data",
                "image",
                "cnns",
                "other",
                "neural",
                "rnns",
                "two",
                "excel",
                "they",
                "series",
                "dependencies",
                "sequential",
                "classification",
                "using",
                "suited",
                "processing",
                "hierarchical",
                "primarily",
                "like",
                "connections",
                "recognition",
                "spatial",
                "object",
                "tasks",
                "local",
                "forecasting",
                "leveraging",
                "temporal",
                "speech",
                "segmentation",
                "detection",
                "modeling",
                "while",
                "designed",
                "language",
                "effective",
                "recurrent",
                "networks",
                "patterns",
                "better",
                "time",
                "types",
                "capture",
                "hand",
                "handling",
                "used",
                "different"
            ]
        },
        {
            "id": "adv_298",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Find the probablitity of getting a black ball if there are 3 bags with 2 black balls and 3 white balls each and a bag is selected randomly and a ball is drawn randomly from it.",
            "expected_keywords": [
                "overall",
                "black",
                "getting",
                "probability",
                "ball"
            ]
        },
        {
            "id": "adv_299",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How to use network graphs for finding out the spread of a disease?",
            "expected_keywords": [
                "infection",
                "edges",
                "targeted",
                "understanding",
                "intervention",
                "interactions",
                "analysis",
                "help",
                "dynamics",
                "outbreaks",
                "researchers",
                "transmission",
                "simulating",
                "graphs",
                "spread",
                "measures",
                "key",
                "analyze",
                "individuals",
                "control",
                "nodes",
                "designing",
                "effectiveness",
                "model",
                "identify",
                "used",
                "strategies",
                "representing",
                "patterns",
                "network",
                "predicting",
                "their",
                "mitigation",
                "containment",
                "disease",
                "evaluate"
            ]
        },
        {
            "id": "adv_300",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the significance of the bias-variance trade-off in machine learning?",
            "expected_keywords": [
                "models",
                "simplistic",
                "underlying",
                "sensitivity",
                "balance",
                "new",
                "data",
                "help",
                "noise",
                "cross",
                "ensemble",
                "underfit",
                "crucial",
                "like",
                "validation",
                "trade",
                "overfit",
                "complex",
                "ability",
                "its",
                "right",
                "bias",
                "unseen",
                "regularization",
                "techniques",
                "between",
                "variance",
                "learning",
                "model",
                "high",
                "building",
                "fluctuations",
                "machine",
                "s",
                "patterns",
                "generalize",
                "methods",
                "managing",
                "overly",
                "well",
                "capture",
                "finding",
                "refers",
                "while"
            ]
        },
        {
            "id": "adv_301",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Derive the OLS loss function for linear regression.",
            "expected_keywords": [
                "parameter",
                "errors",
                "ols",
                "xi",
                "least",
                "c",
                "data",
                "minimizing",
                "estimated",
                "where",
                "value",
                "optimal",
                "linear",
                "ordinary",
                "derived",
                "slope",
                "intercept",
                "yi",
                "values",
                "function",
                "feature",
                "fit",
                "predicted",
                "respect",
                "input",
                "between",
                "loss",
                "gives",
                "squared",
                "model",
                "l",
                "squares",
                "best",
                "actual",
                "given",
                "sum",
                "mxi",
                "m",
                "regression"
            ]
        },
        {
            "id": "adv_302",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Why can\u2019t we use linear regression for classification tasks?",
            "expected_keywords": [
                "trees",
                "boundaries",
                "instead",
                "underlying",
                "vector",
                "discrete",
                "appropriate",
                "whereas",
                "suitable",
                "continuous",
                "result",
                "predicts",
                "labels",
                "decision",
                "linear",
                "valid",
                "correspond",
                "classification",
                "using",
                "like",
                "class",
                "algorithms",
                "tasks",
                "values",
                "predictions",
                "because",
                "require",
                "logistic",
                "machines",
                "effectively",
                "support",
                "capture",
                "more",
                "do",
                "regression"
            ]
        },
        {
            "id": "adv_303",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Why do we perform normalization?",
            "expected_keywords": [
                "k",
                "distance",
                "features",
                "vector",
                "ensures",
                "common",
                "convergence",
                "optimization",
                "larger",
                "improving",
                "neighbors",
                "like",
                "equally",
                "algorithms",
                "normalization",
                "scale",
                "dataset",
                "performed",
                "gradient",
                "dominating",
                "based",
                "scales",
                "all",
                "range",
                "particularly",
                "prevents",
                "typically",
                "model",
                "learning",
                "nearest",
                "machines",
                "helps",
                "contribute",
                "support",
                "important",
                "process"
            ]
        },
        {
            "id": "adv_304",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast upsampling and downsampling.",
            "expected_keywords": [
                "synthetic",
                "majority",
                "randomly",
                "instances",
                "generating",
                "balance",
                "increasing",
                "result",
                "help",
                "valuable",
                "learn",
                "lead",
                "improve",
                "classes",
                "samples",
                "class",
                "removing",
                "ability",
                "imbalance",
                "dataset",
                "overfitting",
                "techniques",
                "address",
                "loss",
                "reducing",
                "model",
                "involves",
                "duplicating",
                "upsampling",
                "number",
                "s",
                "minority",
                "but",
                "information",
                "downsampling",
                "used",
                "while"
            ]
        },
        {
            "id": "adv_305",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is data leakage and how can we identify it?",
            "expected_keywords": [
                "when",
                "sets",
                "occurs",
                "new",
                "data",
                "no",
                "create",
                "performance",
                "test",
                "during",
                "help",
                "cross",
                "splitting",
                "leakage",
                "proper",
                "optimistic",
                "prevent",
                "validation",
                "generalization",
                "leading",
                "dataset",
                "feature",
                "techniques",
                "ensuring",
                "carefully",
                "engineering",
                "training",
                "model",
                "such",
                "examining",
                "estimates",
                "preprocessing",
                "outside",
                "overly",
                "steps",
                "information",
                "poor",
                "identified",
                "used"
            ]
        },
        {
            "id": "adv_306",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the classification report and the metrics it includes.",
            "expected_keywords": [
                "comprehensive",
                "instances",
                "recall",
                "each",
                "indicates",
                "performance",
                "positive",
                "classes",
                "metrics",
                "score",
                "classification",
                "evaluation",
                "precision",
                "report",
                "summary",
                "measures",
                "class",
                "ability",
                "accuracy",
                "provides",
                "true",
                "predictions",
                "harmonic",
                "across",
                "all",
                "model",
                "such",
                "including",
                "number",
                "s",
                "support",
                "capture",
                "mean",
                "different"
            ]
        },
        {
            "id": "adv_307",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What are some hyperparameters of the Random Forest regressor that help avoid overfitting?",
            "expected_keywords": [
                "trees",
                "required",
                "features",
                "when",
                "each",
                "new",
                "split",
                "data",
                "help",
                "looking",
                "node",
                "complexity",
                "decision",
                "improve",
                "minimum",
                "samples",
                "maximum",
                "some",
                "generalization",
                "avoid",
                "its",
                "control",
                "forest",
                "consider",
                "depth",
                "overfitting",
                "regressor",
                "these",
                "tree",
                "tuning",
                "model",
                "number",
                "best",
                "hyperparameters",
                "random",
                "include"
            ]
        },
        {
            "id": "adv_308",
            "category": "ml",
            "difficulty": "expert",
            "question": "What is the bias-variance tradeoff?",
            "expected_keywords": [
                "models",
                "simplistic",
                "underlying",
                "sensitivity",
                "balance",
                "new",
                "data",
                "noise",
                "underfit",
                "crucial",
                "tradeoff",
                "overfit",
                "complex",
                "ability",
                "its",
                "right",
                "bias",
                "unseen",
                "between",
                "variance",
                "model",
                "high",
                "building",
                "fluctuations",
                "s",
                "patterns",
                "generalize",
                "overly",
                "well",
                "capture",
                "finding",
                "refers",
                "while"
            ]
        },
        {
            "id": "adv_309",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Is it always necessary to use an 80:20 ratio for the train-test split?",
            "expected_keywords": [
                "problem",
                "specific",
                "always",
                "use",
                "appropriate",
                "split",
                "suitable",
                "data",
                "no",
                "necessary",
                "being",
                "test",
                "distribution",
                "complexity",
                "depends",
                "evaluation",
                "ensure",
                "some",
                "key",
                "reliable",
                "dataset",
                "set",
                "representative",
                "ratio",
                "train",
                "while",
                "size",
                "addressed",
                "training",
                "overall",
                "model",
                "such",
                "large",
                "effectively",
                "enough",
                "different",
                "more",
                "cases"
            ]
        },
        {
            "id": "adv_310",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is one-shot learning?",
            "expected_keywords": [
                "applications",
                "facial",
                "few",
                "often",
                "new",
                "data",
                "include",
                "where",
                "classes",
                "classification",
                "prior",
                "recognition",
                "one",
                "tasks",
                "only",
                "trained",
                "recognize",
                "limited",
                "techniques",
                "challenging",
                "particularly",
                "examples",
                "shot",
                "amounts",
                "transfer",
                "labeled",
                "learning",
                "model",
                "large",
                "scenarios",
                "machine",
                "useful",
                "leverage",
                "knowledge",
                "generalize",
                "approach",
                "handwriting",
                "metric",
                "collecting"
            ]
        },
        {
            "id": "adv_311",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast Manhattan Distance and Euclidean Distance.",
            "expected_keywords": [
                "space",
                "works",
                "distance",
                "euclidean",
                "differences",
                "two",
                "points",
                "known",
                "square",
                "low",
                "commonly",
                "manhattan",
                "dimensional",
                "measures",
                "feature",
                "absolute",
                "outliers",
                "between",
                "sensitive",
                "root",
                "squared",
                "high",
                "also",
                "large",
                "robust",
                "well",
                "spaces",
                "coordinates",
                "sum",
                "used",
                "while",
                "more"
            ]
        },
        {
            "id": "adv_312",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast deep learning and machine learning.",
            "expected_keywords": [
                "regression",
                "layers",
                "trees",
                "often",
                "vector",
                "focuses",
                "resources",
                "natural",
                "many",
                "data",
                "subset",
                "image",
                "deep",
                "neural",
                "power",
                "where",
                "decision",
                "linear",
                "less",
                "processing",
                "complex",
                "recognition",
                "algorithms",
                "excels",
                "encompasses",
                "tasks",
                "broader",
                "available",
                "speech",
                "range",
                "amounts",
                "interpretable",
                "computational",
                "require",
                "learning",
                "model",
                "such",
                "including",
                "machines",
                "language",
                "large",
                "machine",
                "networks",
                "patterns",
                "traditional",
                "support",
                "more",
                "relationships"
            ]
        },
        {
            "id": "adv_313",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is gradient descent?",
            "expected_keywords": [
                "iteratively",
                "calculates",
                "batch",
                "variants",
                "minimize",
                "algorithm",
                "updating",
                "optimization",
                "descent",
                "optimal",
                "stochastic",
                "direction",
                "parameters",
                "values",
                "function",
                "gradient",
                "fit",
                "error",
                "mini",
                "predicted",
                "respect",
                "negative",
                "between",
                "loss",
                "moves",
                "find",
                "model",
                "reducing",
                "s",
                "best",
                "helps",
                "actual",
                "finding",
                "used",
                "include"
            ]
        },
        {
            "id": "adv_314",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is backpropagation?",
            "expected_keywords": [
                "backward",
                "output",
                "propagated",
                "gradients",
                "back",
                "algorithm",
                "main",
                "data",
                "minimizing",
                "updating",
                "weights",
                "performance",
                "neural",
                "calculate",
                "optimization",
                "where",
                "descent",
                "two",
                "forward",
                "improving",
                "using",
                "like",
                "passed",
                "propagation",
                "compute",
                "backpropagation",
                "function",
                "gradient",
                "error",
                "then",
                "based",
                "train",
                "input",
                "updated",
                "loss",
                "model",
                "involves",
                "networks",
                "s",
                "network",
                "helps",
                "steps",
                "used"
            ]
        },
        {
            "id": "adv_315",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast batch gradient descent and stochastic gradient descent.",
            "expected_keywords": [
                "noisy",
                "calculating",
                "batch",
                "calculates",
                "variants",
                "small",
                "updates",
                "resources",
                "balance",
                "algorithm",
                "stability",
                "advantages",
                "stable",
                "optimization",
                "descent",
                "two",
                "batches",
                "usage",
                "less",
                "using",
                "stochastic",
                "single",
                "memory",
                "sgd",
                "faster",
                "dataset",
                "requiring",
                "combines",
                "function",
                "providing",
                "gradient",
                "mini",
                "example",
                "resulting",
                "examples",
                "between",
                "loss",
                "training",
                "computational",
                "but",
                "entire",
                "both",
                "efficiency",
                "more"
            ]
        },
        {
            "id": "adv_316",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the vanishing gradient problem?",
            "expected_keywords": [
                "problem",
                "become",
                "batch",
                "gradients",
                "small",
                "layers",
                "when",
                "sigmoid",
                "occurs",
                "updates",
                "pronounced",
                "many",
                "stalled",
                "during",
                "mitigate",
                "weights",
                "deep",
                "preventing",
                "vanishing",
                "activation",
                "properly",
                "using",
                "like",
                "functions",
                "normalization",
                "backpropagation",
                "parameters",
                "very",
                "function",
                "leads",
                "gradient",
                "certain",
                "techniques",
                "respect",
                "initializing",
                "loss",
                "tanh",
                "model",
                "learning",
                "slow",
                "networks",
                "s",
                "effectively",
                "relu",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_317",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the exploding gradient problem?",
            "expected_keywords": [
                "problem",
                "become",
                "gradients",
                "layers",
                "when",
                "causing",
                "occurs",
                "updates",
                "pronounced",
                "many",
                "during",
                "mitigate",
                "weights",
                "exploding",
                "deep",
                "learn",
                "smaller",
                "activation",
                "properly",
                "using",
                "functions",
                "rates",
                "unstable",
                "backpropagation",
                "parameters",
                "very",
                "function",
                "leads",
                "gradient",
                "certain",
                "techniques",
                "respect",
                "diverge",
                "initializing",
                "loss",
                "clipping",
                "model",
                "learning",
                "large",
                "fail",
                "s",
                "effectively",
                "networks",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_318",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is dropout in neural networks?",
            "expected_keywords": [
                "specific",
                "layers",
                "randomly",
                "features",
                "reduces",
                "technique",
                "forces",
                "units",
                "adaptation",
                "zero",
                "introducing",
                "during",
                "dropout",
                "neural",
                "proportion",
                "learn",
                "noise",
                "improve",
                "preventing",
                "applied",
                "co",
                "rate",
                "prevent",
                "setting",
                "generalization",
                "hidden",
                "regularization",
                "overfitting",
                "input",
                "training",
                "fraction",
                "model",
                "typically",
                "involves",
                "reliance",
                "networks",
                "network",
                "helps",
                "robust",
                "neurons",
                "drop",
                "used",
                "specifies",
                "more"
            ]
        },
        {
            "id": "adv_319",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast L1 and L2 regularization.",
            "expected_keywords": [
                "lasso",
                "does",
                "benefits",
                "zero",
                "selection",
                "penalty",
                "sparsity",
                "promoting",
                "promote",
                "ridge",
                "preventing",
                "simpler",
                "some",
                "coefficients",
                "results",
                "combines",
                "feature",
                "values",
                "absolute",
                "function",
                "regularization",
                "overfitting",
                "term",
                "driving",
                "loss",
                "adds",
                "squared",
                "model",
                "reducing",
                "elastic",
                "net",
                "large",
                "leverage",
                "multicollinearity",
                "methods",
                "better",
                "but",
                "both",
                "handle"
            ]
        },
        {
            "id": "adv_320",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a generative model and a discriminative model.",
            "expected_keywords": [
                "mixture",
                "models",
                "regression",
                "features",
                "vector",
                "new",
                "target",
                "data",
                "focusing",
                "gaussian",
                "other",
                "learn",
                "joint",
                "distribution",
                "two",
                "decision",
                "classes",
                "samples",
                "them",
                "classification",
                "markov",
                "tasks",
                "missing",
                "generate",
                "variable",
                "generative",
                "hidden",
                "unsupervised",
                "perform",
                "allowing",
                "boundary",
                "input",
                "examples",
                "conditional",
                "between",
                "accurate",
                "typically",
                "learning",
                "logistic",
                "machines",
                "machine",
                "discriminative",
                "probability",
                "support",
                "types",
                "hand",
                "given",
                "handle",
                "while",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_321",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is a recurrent neural network (RNN)?",
            "expected_keywords": [
                "problem",
                "variants",
                "structure",
                "suitable",
                "data",
                "previous",
                "lstm",
                "gru",
                "uses",
                "neural",
                "mitigated",
                "rnns",
                "vanishing",
                "allows",
                "series",
                "type",
                "sequential",
                "dependencies",
                "them",
                "using",
                "processing",
                "like",
                "connections",
                "recognition",
                "suffer",
                "tasks",
                "memory",
                "forecasting",
                "temporal",
                "making",
                "speech",
                "gradient",
                "rnn",
                "modeling",
                "retain",
                "however",
                "designed",
                "language",
                "recurrent",
                "patterns",
                "network",
                "time",
                "steps",
                "capture",
                "information"
            ]
        },
        {
            "id": "adv_322",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast RNN and LSTM.",
            "expected_keywords": [
                "problem",
                "provide",
                "output",
                "variant",
                "use",
                "data",
                "lstm",
                "performance",
                "neural",
                "rnns",
                "short",
                "vanishing",
                "forget",
                "dependencies",
                "sequential",
                "processing",
                "connections",
                "complex",
                "suffer",
                "leading",
                "tasks",
                "memory",
                "intensive",
                "difficulties",
                "requiring",
                "temporal",
                "gradient",
                "term",
                "input",
                "address",
                "lstms",
                "designed",
                "learning",
                "cells",
                "recurrent",
                "networks",
                "effectively",
                "gating",
                "better",
                "computationally",
                "long",
                "capture",
                "but",
                "both",
                "mechanisms",
                "than",
                "gates",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_323",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast Convolutional Neural Networks (CNNs) and Recurrent Neural Networks (RNNs) in terms of their architecture and applications.",
            "expected_keywords": [
                "layers",
                "features",
                "use",
                "convolutional",
                "suitable",
                "data",
                "image",
                "cnns",
                "rnns",
                "series",
                "dependencies",
                "them",
                "sequential",
                "hierarchical",
                "processing",
                "like",
                "connections",
                "spatial",
                "tasks",
                "local",
                "forecasting",
                "making",
                "temporal",
                "modeling",
                "designed",
                "language",
                "recurrent",
                "patterns",
                "time",
                "capture",
                "video"
            ]
        },
        {
            "id": "adv_324",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast supervised, unsupervised, and semi-supervised learning in terms of their methodologies and use cases.",
            "expected_keywords": [
                "models",
                "when",
                "often",
                "data",
                "clustering",
                "unlabeled",
                "uses",
                "performance",
                "semi",
                "improve",
                "supervised",
                "classification",
                "like",
                "discover",
                "scarce",
                "tasks",
                "combines",
                "unsupervised",
                "train",
                "labeled",
                "learning",
                "such",
                "model",
                "structures",
                "reduction",
                "used",
                "patterns",
                "both",
                "dimensionality",
                "regression"
            ]
        },
        {
            "id": "adv_325",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a confusion matrix and a classification report in terms of the information they provide and their applications.",
            "expected_keywords": [
                "comprehensive",
                "recall",
                "performance",
                "classes",
                "metrics",
                "score",
                "classification",
                "positives",
                "precision",
                "like",
                "report",
                "detailed",
                "summary",
                "provides",
                "includes",
                "true",
                "providing",
                "breakdown",
                "confusion",
                "helping",
                "across",
                "false",
                "matrix",
                "model",
                "negatives",
                "s",
                "support",
                "different",
                "evaluate"
            ]
        },
        {
            "id": "adv_326",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a validation set and a test set in terms of their roles in model evaluation.",
            "expected_keywords": [
                "after",
                "data",
                "during",
                "test",
                "performance",
                "prevent",
                "assessment",
                "validation",
                "generalization",
                "its",
                "ability",
                "set",
                "providing",
                "unseen",
                "overfitting",
                "unbiased",
                "tune",
                "training",
                "model",
                "s",
                "hyperparameters",
                "used",
                "while",
                "evaluate"
            ]
        },
        {
            "id": "adv_327",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a feedforward neural network and a convolutional neural network in terms of their structure and typical use cases.",
            "expected_keywords": [
                "layers",
                "connected",
                "convolutional",
                "data",
                "image",
                "neural",
                "involving",
                "classification",
                "processing",
                "like",
                "spatial",
                "specialized",
                "tasks",
                "purpose",
                "includes",
                "making",
                "general",
                "feedforward",
                "consists",
                "such",
                "fully",
                "network",
                "video",
                "pooling",
                "used",
                "regression"
            ]
        },
        {
            "id": "adv_328",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a feedforward neural network and a recurrent neural network in terms of their architecture and applications.",
            "expected_keywords": [
                "straightforward",
                "suitable",
                "data",
                "no",
                "uses",
                "neural",
                "series",
                "dependencies",
                "sequential",
                "classification",
                "like",
                "connections",
                "tasks",
                "cycles",
                "forecasting",
                "temporal",
                "making",
                "feedforward",
                "modeling",
                "language",
                "recurrent",
                "architecture",
                "network",
                "time",
                "capture",
                "regression"
            ]
        },
        {
            "id": "adv_329",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a perceptron and a neural network in terms of their complexity and capabilities.",
            "expected_keywords": [
                "regression",
                "layers",
                "suitable",
                "neural",
                "layer",
                "multiple",
                "classification",
                "binary",
                "perceptron",
                "complex",
                "single",
                "tasks",
                "its",
                "limited",
                "ability",
                "making",
                "hidden",
                "range",
                "consists",
                "model",
                "including",
                "patterns",
                "network",
                "wide",
                "capture",
                "used",
                "more",
                "relationships"
            ]
        },
        {
            "id": "adv_330",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a neural network and a deep neural network in terms of their depth and learning capacity.",
            "expected_keywords": [
                "layers",
                "natural",
                "many",
                "higher",
                "suitable",
                "image",
                "deep",
                "neural",
                "two",
                "them",
                "processing",
                "like",
                "complex",
                "recognition",
                "one",
                "tasks",
                "making",
                "hidden",
                "while",
                "typically",
                "learning",
                "model",
                "language",
                "networks",
                "patterns",
                "network",
                "capacity",
                "more",
                "relationships"
            ]
        },
        {
            "id": "adv_331",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a shallow neural network and a deep neural network in terms of their architecture and performance.",
            "expected_keywords": [
                "small",
                "layers",
                "resources",
                "achieve",
                "many",
                "higher",
                "performance",
                "deep",
                "neural",
                "simpler",
                "intricate",
                "prevent",
                "complex",
                "tasks",
                "its",
                "limited",
                "ability",
                "faster",
                "requiring",
                "making",
                "allowing",
                "regularization",
                "overfitting",
                "train",
                "shallow",
                "computational",
                "model",
                "number",
                "careful",
                "patterns",
                "network",
                "but",
                "capture",
                "more",
                "relationships"
            ]
        },
        {
            "id": "adv_332",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a linear model and a non-linear model in terms of their assumptions and flexibility.",
            "expected_keywords": [
                "features",
                "greater",
                "resources",
                "target",
                "data",
                "capturing",
                "assumes",
                "linear",
                "relationship",
                "transformations",
                "using",
                "potentially",
                "complex",
                "simple",
                "non",
                "limited",
                "accuracy",
                "requiring",
                "variable",
                "making",
                "providing",
                "input",
                "between",
                "interpretable",
                "computational",
                "model",
                "flexibility",
                "patterns",
                "but",
                "capture",
                "more",
                "relationships"
            ]
        },
        {
            "id": "adv_333",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a classification model and a regression model in terms of their objectives and output.",
            "expected_keywords": [
                "models",
                "output",
                "discrete",
                "continuous",
                "spam",
                "house",
                "numerical",
                "labels",
                "classification",
                "class",
                "probabilities",
                "values",
                "prices",
                "model",
                "such",
                "predict",
                "aims",
                "while",
                "regression"
            ]
        },
        {
            "id": "adv_334",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a supervised learning model and an unsupervised learning model in terms of their training data and goals.",
            "expected_keywords": [
                "output",
                "data",
                "unlabeled",
                "clustering",
                "aiming",
                "learn",
                "supervised",
                "classification",
                "like",
                "discover",
                "tasks",
                "pairs",
                "trained",
                "unsupervised",
                "outputs",
                "input",
                "labeled",
                "learning",
                "model",
                "structures",
                "reduction",
                "patterns",
                "inputs",
                "relationships",
                "dimensionality",
                "within",
                "mapping",
                "regression"
            ]
        },
        {
            "id": "adv_335",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a semi-supervised learning model and an unsupervised learning model in terms of their data requirements and applications.",
            "expected_keywords": [
                "exploratory",
                "often",
                "suitable",
                "data",
                "performance",
                "unlabeled",
                "uses",
                "analysis",
                "clustering",
                "semi",
                "improve",
                "supervised",
                "discover",
                "only",
                "limited",
                "making",
                "unsupervised",
                "labeled",
                "model",
                "learning",
                "structures",
                "scenarios",
                "patterns",
                "both",
                "used"
            ]
        },
        {
            "id": "adv_336",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a reinforcement learning model and a supervised learning model in terms of their learning processes and applications.",
            "expected_keywords": [
                "interacting",
                "output",
                "reinforcement",
                "environment",
                "suitable",
                "data",
                "form",
                "playing",
                "supervised",
                "classification",
                "like",
                "receiving",
                "tasks",
                "feedback",
                "pairs",
                "making",
                "input",
                "game",
                "rewards",
                "labeled",
                "learns",
                "learning",
                "model",
                "robotics",
                "penalties",
                "regression"
            ]
        },
        {
            "id": "adv_337",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a parametric model and a non-parametric model in terms of their assumptions and flexibility.",
            "expected_keywords": [
                "specific",
                "does",
                "underlying",
                "greater",
                "resources",
                "flexible",
                "data",
                "assume",
                "form",
                "assumes",
                "complexity",
                "fixed",
                "simpler",
                "less",
                "potentially",
                "parametric",
                "non",
                "parameters",
                "faster",
                "adapt",
                "requiring",
                "function",
                "making",
                "providing",
                "computational",
                "model",
                "flexibility",
                "number",
                "s",
                "but",
                "more"
            ]
        },
        {
            "id": "adv_338",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a Bayesian model and a frequentist model in terms of their approaches to probability and inference.",
            "expected_keywords": [
                "straightforward",
                "provide",
                "relies",
                "models",
                "does",
                "use",
                "make",
                "updates",
                "incorporation",
                "inferences",
                "flexible",
                "data",
                "focusing",
                "uses",
                "observed",
                "them",
                "frequentist",
                "prior",
                "point",
                "confidence",
                "practice",
                "uncertainty",
                "probabilistic",
                "allowing",
                "run",
                "interpretable",
                "frequencies",
                "model",
                "intervals",
                "knowledge",
                "estimates",
                "bayesian",
                "long",
                "distributions",
                "framework",
                "used",
                "widely",
                "while",
                "more"
            ]
        },
        {
            "id": "adv_339",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a deterministic model and a probabilistic model in terms of their predictions and uncertainty handling.",
            "expected_keywords": [
                "models",
                "especially",
                "variability",
                "deterministic",
                "data",
                "distribution",
                "possible",
                "capturing",
                "fixed",
                "single",
                "prediction",
                "uncertainty",
                "provides",
                "probabilistic",
                "predictions",
                "accounting",
                "input",
                "inherent",
                "without",
                "model",
                "informative",
                "scenarios",
                "robust",
                "given",
                "more"
            ]
        },
        {
            "id": "adv_340",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a linear regression model and a logistic regression model in terms of their objectives and applications.",
            "expected_keywords": [
                "features",
                "belonging",
                "target",
                "continuous",
                "spam",
                "house",
                "labels",
                "linear",
                "relationship",
                "like",
                "binary",
                "class",
                "tasks",
                "values",
                "variable",
                "prices",
                "modeling",
                "detection",
                "input",
                "between",
                "model",
                "logistic",
                "predicting",
                "probability",
                "predict",
                "aims",
                "used",
                "regression"
            ]
        },
        {
            "id": "adv_341",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a gradient boosting machine and a random forest in terms of their ensemble methods and performance.",
            "expected_keywords": [
                "errors",
                "trees",
                "ones",
                "learners",
                "weak",
                "each",
                "use",
                "often",
                "achieve",
                "selection",
                "higher",
                "previous",
                "forests",
                "correcting",
                "performance",
                "stable",
                "ensemble",
                "decision",
                "samples",
                "sequentially",
                "using",
                "potentially",
                "robustness",
                "builds",
                "accuracy",
                "easier",
                "learner",
                "feature",
                "providing",
                "gradient",
                "forest",
                "overfitting",
                "boosting",
                "require",
                "reducing",
                "high",
                "tuning",
                "machines",
                "machine",
                "careful",
                "prone",
                "independently",
                "but",
                "random",
                "more",
                "while",
                "bootstrapped"
            ]
        },
        {
            "id": "adv_342",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a support vector machine and a neural network in terms of their learning algorithms and applications.",
            "expected_keywords": [
                "interconnected",
                "provide",
                "small",
                "layers",
                "vector",
                "svm",
                "greater",
                "natural",
                "suitable",
                "data",
                "image",
                "uses",
                "neural",
                "learn",
                "optimal",
                "svms",
                "decision",
                "classes",
                "margin",
                "less",
                "classification",
                "processing",
                "like",
                "sized",
                "complex",
                "recognition",
                "medium",
                "tasks",
                "capacity",
                "boundary",
                "based",
                "between",
                "interpretable",
                "require",
                "find",
                "learning",
                "language",
                "flexibility",
                "large",
                "machine",
                "networks",
                "patterns",
                "network",
                "support",
                "approach",
                "neurons",
                "datasets",
                "while",
                "more",
                "regression"
            ]
        },
        {
            "id": "adv_343",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a k-means clustering algorithm and a hierarchical clustering algorithm in terms of their methodologies and use cases.",
            "expected_keywords": [
                "nested",
                "exploratory",
                "k",
                "structure",
                "within",
                "suitable",
                "data",
                "minimizing",
                "clustering",
                "analysis",
                "smaller",
                "defined",
                "hierarchical",
                "like",
                "detailed",
                "builds",
                "partitions",
                "faster",
                "provides",
                "cluster",
                "datasets",
                "scalable",
                "tree",
                "interpretable",
                "variance",
                "large",
                "means",
                "well",
                "clusters",
                "while",
                "more"
            ]
        },
        {
            "id": "adv_344",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast principal component analysis (PCA) and t-distributed stochastic neighbor embedding (t-SNE) in terms of their dimensionality reduction techniques and applications.",
            "expected_keywords": [
                "space",
                "sne",
                "technique",
                "components",
                "suitable",
                "t",
                "data",
                "clustering",
                "pca",
                "noise",
                "linear",
                "projects",
                "like",
                "dimensional",
                "maximum",
                "complex",
                "tasks",
                "non",
                "local",
                "faster",
                "provides",
                "feature",
                "visualization",
                "onto",
                "mapping",
                "preserving",
                "extraction",
                "interpretable",
                "principal",
                "variance",
                "high",
                "reduction",
                "structures",
                "orthogonal",
                "better",
                "preserves",
                "lower",
                "more",
                "dimensionality",
                "while",
                "similarities"
            ]
        },
        {
            "id": "adv_345",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a confusion matrix and a ROC curve in terms of their evaluation metrics and applications.",
            "expected_keywords": [
                "specific",
                "different",
                "settings",
                "roc",
                "performance",
                "discriminate",
                "positive",
                "various",
                "assess",
                "classes",
                "thresholds",
                "rate",
                "classification",
                "evaluation",
                "positives",
                "detailed",
                "broader",
                "ability",
                "provides",
                "true",
                "breakdown",
                "confusion",
                "helping",
                "across",
                "false",
                "threshold",
                "between",
                "matrix",
                "model",
                "negatives",
                "s",
                "against",
                "plots",
                "curve",
                "while",
                "more",
                "evaluate"
            ]
        },
        {
            "id": "adv_346",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a type I error and a type II error in terms of their definitions and implications.",
            "expected_keywords": [
                "alarm",
                "accepted",
                "errors",
                "when",
                "occurs",
                "missed",
                "hypothesis",
                "null",
                "detections",
                "positive",
                "where",
                "type",
                "critical",
                "ii",
                "incorrectly",
                "leading",
                "rejected",
                "error",
                "detection",
                "false",
                "negative",
                "costly",
                "alarms",
                "i",
                "harmful",
                "scenarios",
                "while",
                "more"
            ]
        },
        {
            "id": "adv_347",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a false positive and a false negative in terms of their definitions and impacts on model performance.",
            "expected_keywords": [
                "alarm",
                "specific",
                "when",
                "consequences",
                "each",
                "occurs",
                "missed",
                "result",
                "predicts",
                "lead",
                "positive",
                "actions",
                "opportunities",
                "depends",
                "type",
                "positives",
                "class",
                "unnecessary",
                "incorrectly",
                "leading",
                "costs",
                "harm",
                "error",
                "detection",
                "false",
                "negative",
                "model",
                "application",
                "negatives",
                "impact",
                "potential",
                "while"
            ]
        },
        {
            "id": "adv_348",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a true positive and a true negative in terms of their definitions and significance in model evaluation.",
            "expected_keywords": [
                "when",
                "occurs",
                "good",
                "reliability",
                "predicts",
                "rejection",
                "performance",
                "positive",
                "significant",
                "they",
                "evaluation",
                "positives",
                "rates",
                "class",
                "successful",
                "accuracy",
                "true",
                "indicating",
                "detection",
                "negative",
                "overall",
                "model",
                "high",
                "negatives",
                "contribute",
                "indicate",
                "correctly"
            ]
        },
        {
            "id": "adv_349",
            "category": "ml",
            "difficulty": "expert",
            "question": "Compare and contrast a ROC curve and a precision-recall curve in terms of their evaluation metrics and use cases.",
            "expected_keywords": [
                "recall",
                "settings",
                "suitable",
                "roc",
                "performance",
                "discriminate",
                "positive",
                "various",
                "assess",
                "classes",
                "rate",
                "precision",
                "ability",
                "true",
                "imbalanced",
                "helping",
                "false",
                "between",
                "threshold",
                "model",
                "informative",
                "s",
                "against",
                "plots",
                "balanced",
                "curve",
                "datasets",
                "while",
                "more",
                "evaluate"
            ]
        },
        {
            "id": "adv_350",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Differentiate between bias and variance in terms of their effects on model performance and generalization.",
            "expected_keywords": [
                "problem",
                "models",
                "small",
                "sensitivity",
                "new",
                "data",
                "good",
                "test",
                "performance",
                "simpler",
                "crucial",
                "introduced",
                "complex",
                "leading",
                "results",
                "bias",
                "unseen",
                "error",
                "overfitting",
                "balancing",
                "underfitting",
                "training",
                "variance",
                "model",
                "high",
                "building",
                "fluctuations",
                "s",
                "generalize",
                "well",
                "poor",
                "but",
                "both",
                "refers",
                "while",
                "approximating"
            ]
        },
        {
            "id": "adv_351",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the difference between L1 and L2 regularization in machine learning.",
            "expected_keywords": [
                "lasso",
                "does",
                "benefits",
                "zero",
                "selection",
                "penalty",
                "sparsity",
                "promoting",
                "promote",
                "ridge",
                "preventing",
                "simpler",
                "some",
                "coefficients",
                "results",
                "combines",
                "feature",
                "values",
                "absolute",
                "function",
                "regularization",
                "overfitting",
                "term",
                "driving",
                "loss",
                "adds",
                "squared",
                "model",
                "reducing",
                "elastic",
                "net",
                "large",
                "leverage",
                "multicollinearity",
                "methods",
                "better",
                "but",
                "both",
                "handle"
            ]
        },
        {
            "id": "adv_352",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What are vanishing and exploding gradients in deep learning?",
            "expected_keywords": [
                "become",
                "batch",
                "gradients",
                "small",
                "layers",
                "when",
                "causing",
                "updates",
                "pronounced",
                "many",
                "stalled",
                "during",
                "mitigate",
                "occur",
                "exploding",
                "deep",
                "vanishing",
                "activation",
                "proper",
                "using",
                "functions",
                "unstable",
                "leading",
                "issues",
                "normalization",
                "divergence",
                "backpropagation",
                "parameters",
                "problems",
                "very",
                "function",
                "gradient",
                "techniques",
                "respect",
                "prevents",
                "these",
                "loss",
                "clipping",
                "model",
                "learning",
                "initialization",
                "slow",
                "large",
                "networks",
                "s",
                "effectively",
                "relu",
                "weight",
                "both",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_353",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How does the Transformer model in NLP work compared to LSTMs?",
            "expected_keywords": [
                "sequences",
                "layers",
                "gradients",
                "use",
                "consist",
                "transformers",
                "attention",
                "uses",
                "other",
                "compared",
                "head",
                "multi",
                "vanishing",
                "forward",
                "parallel",
                "feed",
                "dependencies",
                "them",
                "sequentially",
                "encoder",
                "slower",
                "efficient",
                "connections",
                "suffer",
                "nlp",
                "faster",
                "making",
                "temporal",
                "allowing",
                "transformer",
                "train",
                "range",
                "input",
                "self",
                "scalable",
                "lstms",
                "training",
                "model",
                "decoder",
                "large",
                "networks",
                "recurrent",
                "better",
                "long",
                "capture",
                "mechanisms",
                "handling",
                "hand",
                "but",
                "datasets",
                "more",
                "process"
            ]
        },
        {
            "id": "adv_354",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Implement a k-means clustering algorithm from scratch in Python.",
            "expected_keywords": [
                "k",
                "distances",
                "implementation",
                "break",
                "import",
                "centroids",
                "algorithm",
                "replace",
                "clustering",
                "here",
                "array",
                "shape",
                "labels",
                "usage",
                "python",
                "numpy",
                "choice",
                "indices",
                "linalg",
                "axis",
                "kmeans",
                "scratch",
                "example",
                "print",
                "false",
                "norm",
                "range",
                "if",
                "all",
                "def",
                "argmin",
                "x",
                "i",
                "means",
                "return",
                "random",
                "newaxis",
                "mean",
                "np"
            ]
        },
        {
            "id": "adv_355",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the concept of the attention mechanism in deep learning.",
            "expected_keywords": [
                "translation",
                "models",
                "specific",
                "assigns",
                "sequence",
                "when",
                "transformers",
                "attention",
                "prioritize",
                "irrelevant",
                "text",
                "weights",
                "performance",
                "image",
                "deep",
                "help",
                "summarization",
                "improve",
                "they",
                "allows",
                "dependencies",
                "relevant",
                "like",
                "parts",
                "tasks",
                "interpretability",
                "making",
                "ignore",
                "mechanism",
                "predictions",
                "input",
                "range",
                "captioning",
                "learning",
                "enabling",
                "model",
                "such",
                "elements",
                "machine",
                "long",
                "information",
                "mechanisms",
                "capture",
                "focus",
                "used",
                "widely",
                "different"
            ]
        },
        {
            "id": "adv_356",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the difference between Batch Normalization and Layer Normalization.",
            "expected_keywords": [
                "batch",
                "small",
                "features",
                "each",
                "computing",
                "suitable",
                "sample",
                "performance",
                "other",
                "neural",
                "help",
                "layer",
                "improve",
                "normalizes",
                "they",
                "shifting",
                "scaling",
                "individual",
                "accelerating",
                "using",
                "stabilize",
                "normalized",
                "normalization",
                "internal",
                "parameters",
                "covariate",
                "feature",
                "values",
                "making",
                "mini",
                "across",
                "techniques",
                "training",
                "variance",
                "reducing",
                "model",
                "involves",
                "differ",
                "shift",
                "learnable",
                "recurrent",
                "networks",
                "their",
                "inputs",
                "but",
                "hand",
                "mean",
                "both",
                "approach",
                "sizes",
                "within",
                "more"
            ]
        },
        {
            "id": "adv_357",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Implement a custom activation function in TensorFlow.",
            "expected_keywords": [
                "mse",
                "layers",
                "define",
                "implementation",
                "import",
                "data",
                "neural",
                "here",
                "tf",
                "activation",
                "usage",
                "custom",
                "sequential",
                "python",
                "y",
                "some",
                "adam",
                "optimizer",
                "keras",
                "generate",
                "function",
                "fit",
                "tensorflow",
                "example",
                "train",
                "loss",
                "def",
                "model",
                "x",
                "return",
                "relu",
                "compile",
                "network",
                "epochs",
                "dense",
                "random",
                "rand",
                "nn",
                "np"
            ]
        },
        {
            "id": "adv_358",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What are the advantages of using Transformers over RNNs for NLP?",
            "expected_keywords": [
                "translation",
                "models",
                "sequences",
                "gradients",
                "several",
                "use",
                "transformers",
                "resources",
                "suitable",
                "attention",
                "scalability",
                "advantages",
                "rnns",
                "various",
                "larger",
                "vanishing",
                "parallel",
                "dependencies",
                "them",
                "modifying",
                "like",
                "adapted",
                "tasks",
                "nlp",
                "faster",
                "easily",
                "making",
                "allowing",
                "utilization",
                "modeling",
                "handle",
                "input",
                "range",
                "self",
                "scalable",
                "datasets",
                "training",
                "computational",
                "language",
                "flexibility",
                "machine",
                "effectively",
                "architecture",
                "parallelization",
                "better",
                "than",
                "long",
                "capture",
                "mechanisms",
                "objectives",
                "struggle",
                "more",
                "process"
            ]
        },
        {
            "id": "adv_359",
            "category": "ml",
            "difficulty": "advanced",
            "question": "How does dropout prevent overfitting in deep learning?",
            "expected_keywords": [
                "introduces",
                "specific",
                "layers",
                "randomly",
                "features",
                "reduces",
                "forces",
                "units",
                "adaptation",
                "zero",
                "during",
                "dropout",
                "weights",
                "deep",
                "proportion",
                "learn",
                "noise",
                "applied",
                "improving",
                "co",
                "rate",
                "setting",
                "generalization",
                "scaled",
                "account",
                "hidden",
                "overfitting",
                "input",
                "inference",
                "prevents",
                "training",
                "fraction",
                "learning",
                "model",
                "typically",
                "reliance",
                "network",
                "robust",
                "dropped",
                "turned",
                "neurons",
                "drop",
                "specifies",
                "more"
            ]
        },
        {
            "id": "adv_360",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the concept of reinforcement learning and its main components.",
            "expected_keywords": [
                "interacting",
                "receives",
                "reinforcement",
                "make",
                "environment",
                "decisions",
                "components",
                "system",
                "main",
                "reward",
                "received",
                "performance",
                "form",
                "where",
                "possible",
                "decision",
                "actions",
                "type",
                "cumulative",
                "context",
                "receiving",
                "state",
                "states",
                "feedback",
                "policy",
                "strategy",
                "learner",
                "set",
                "follows",
                "maximize",
                "based",
                "situation",
                "external",
                "rewards",
                "moves",
                "learns",
                "learning",
                "current",
                "machine",
                "action",
                "s",
                "agent",
                "maker",
                "interacts",
                "penalties",
                "representation",
                "used",
                "mapping",
                "evaluate"
            ]
        },
        {
            "id": "adv_361",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working of GANs in machine learning.",
            "expected_keywords": [
                "gans",
                "distinguishing",
                "each",
                "consist",
                "zero",
                "discriminator",
                "data",
                "fake",
                "fool",
                "image",
                "other",
                "generator",
                "neural",
                "learn",
                "quality",
                "two",
                "style",
                "augmentation",
                "distinguish",
                "samples",
                "realistic",
                "tries",
                "like",
                "compete",
                "tasks",
                "real",
                "generative",
                "generation",
                "between",
                "mimic",
                "game",
                "transfer",
                "becomes",
                "creates",
                "high",
                "identify",
                "produce",
                "networks",
                "against",
                "helps",
                "adversarial",
                "better",
                "sum",
                "correctly",
                "aims",
                "used",
                "widely",
                "while",
                "process"
            ]
        },
        {
            "id": "adv_362",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working of feature selection in machine learning.",
            "expected_keywords": [
                "recursive",
                "statistical",
                "lasso",
                "features",
                "use",
                "each",
                "enhance",
                "common",
                "selection",
                "algorithm",
                "subset",
                "include",
                "performance",
                "during",
                "power",
                "wrapper",
                "complexity",
                "improve",
                "decision",
                "embedded",
                "forward",
                "evaluating",
                "relevant",
                "filter",
                "reduce",
                "square",
                "measures",
                "search",
                "importance",
                "interpretability",
                "correlation",
                "accuracy",
                "dataset",
                "feature",
                "perform",
                "evaluate",
                "regularization",
                "techniques",
                "overfitting",
                "most",
                "based",
                "tree",
                "training",
                "subsets",
                "model",
                "such",
                "involves",
                "selecting",
                "elimination",
                "relevance",
                "methods",
                "contributes",
                "helps",
                "predictive",
                "chi",
                "information",
                "mutual",
                "process"
            ]
        },
        {
            "id": "adv_363",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working of gradient descent in machine learning.",
            "expected_keywords": [
                "noisy",
                "iteratively",
                "calculates",
                "batch",
                "variants",
                "small",
                "each",
                "updates",
                "resources",
                "balance",
                "minimize",
                "algorithm",
                "stability",
                "updating",
                "stable",
                "optimization",
                "step",
                "descent",
                "optimal",
                "determines",
                "batches",
                "usage",
                "rate",
                "less",
                "using",
                "stochastic",
                "direction",
                "single",
                "memory",
                "parameters",
                "sgd",
                "faster",
                "dataset",
                "requiring",
                "values",
                "function",
                "update",
                "gradient",
                "providing",
                "mini",
                "example",
                "fit",
                "resulting",
                "error",
                "predicted",
                "respect",
                "negative",
                "size",
                "loss",
                "examples",
                "training",
                "moves",
                "find",
                "model",
                "learning",
                "computational",
                "reducing",
                "s",
                "best",
                "between",
                "helps",
                "actual",
                "but",
                "entire",
                "finding",
                "efficiency",
                "used",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_364",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working of time series forecasting in machine learning.",
            "expected_keywords": [
                "averages",
                "models",
                "applications",
                "holidays",
                "average",
                "captures",
                "common",
                "higher",
                "data",
                "lstm",
                "weights",
                "uses",
                "neural",
                "historical",
                "various",
                "short",
                "integrated",
                "series",
                "type",
                "dependencies",
                "sequential",
                "weather",
                "autoregressive",
                "smoothing",
                "tool",
                "seasonality",
                "future",
                "ets",
                "facebook",
                "trends",
                "past",
                "missing",
                "memory",
                "exponential",
                "forecasting",
                "combines",
                "prediction",
                "values",
                "prophet",
                "stock",
                "rnn",
                "techniques",
                "based",
                "arima",
                "term",
                "weighted",
                "differencing",
                "learning",
                "model",
                "involves",
                "observations",
                "such",
                "recurrent",
                "machine",
                "networks",
                "predicting",
                "patterns",
                "network",
                "price",
                "demand",
                "time",
                "long",
                "capture",
                "given",
                "autoregression",
                "developed",
                "recent",
                "handles",
                "used",
                "moving",
                "forecast",
                "more",
                "include"
            ]
        },
        {
            "id": "adv_365",
            "category": "ml",
            "difficulty": "expert",
            "question": "Explain the working of Bayesian optimization in machine learning.",
            "expected_keywords": [
                "noisy",
                "models",
                "evaluated",
                "repeating",
                "technique",
                "convergence",
                "hyperparameter",
                "exploration",
                "suitable",
                "updating",
                "gaussian",
                "uses",
                "optimize",
                "optimization",
                "until",
                "points",
                "using",
                "evaluating",
                "predefined",
                "objective",
                "approximate",
                "acquisition",
                "efficient",
                "functions",
                "point",
                "surrogate",
                "optimizing",
                "exploitation",
                "probabilistic",
                "select",
                "set",
                "function",
                "values",
                "making",
                "evaluate",
                "expensive",
                "balancing",
                "initializing",
                "typically",
                "learning",
                "building",
                "model",
                "involves",
                "tuning",
                "number",
                "machine",
                "bayesian",
                "iterations",
                "hyperparameters",
                "next",
                "random",
                "used",
                "determine",
                "process"
            ]
        },
        {
            "id": "adv_366",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working of neural networks in machine learning.",
            "expected_keywords": [
                "interconnected",
                "output",
                "regression",
                "applications",
                "layers",
                "structure",
                "features",
                "receives",
                "consist",
                "natural",
                "components",
                "minimize",
                "main",
                "data",
                "updating",
                "weights",
                "image",
                "neural",
                "learn",
                "optimization",
                "capturing",
                "various",
                "descent",
                "layer",
                "activation",
                "they",
                "type",
                "them",
                "using",
                "final",
                "classification",
                "processing",
                "like",
                "functions",
                "human",
                "complex",
                "algorithms",
                "recognition",
                "passes",
                "apply",
                "tasks",
                "trained",
                "function",
                "inspired",
                "hidden",
                "predictions",
                "gradient",
                "processed",
                "based",
                "input",
                "weighted",
                "loss",
                "training",
                "learning",
                "model",
                "language",
                "including",
                "networks",
                "machine",
                "patterns",
                "network",
                "brain",
                "inputs",
                "produces",
                "relationships",
                "information",
                "biases",
                "sum",
                "neurons",
                "used",
                "more",
                "process"
            ]
        },
        {
            "id": "adv_367",
            "category": "ml",
            "difficulty": "expert",
            "question": "Explain the working of CNN architectures in machine learning.",
            "expected_keywords": [
                "batch",
                "layers",
                "several",
                "features",
                "use",
                "connected",
                "consist",
                "make",
                "downsample",
                "convolutional",
                "connect",
                "data",
                "previous",
                "dropout",
                "image",
                "cnns",
                "neural",
                "similar",
                "layer",
                "improve",
                "activation",
                "they",
                "type",
                "classification",
                "images",
                "final",
                "processing",
                "reduce",
                "prevent",
                "like",
                "functions",
                "spatial",
                "normalization",
                "tasks",
                "object",
                "local",
                "maps",
                "feature",
                "filters",
                "predictions",
                "segmentation",
                "overfitting",
                "techniques",
                "detection",
                "retain",
                "input",
                "all",
                "training",
                "designed",
                "such",
                "extract",
                "including",
                "used",
                "networks",
                "fully",
                "patterns",
                "network",
                "traditional",
                "relu",
                "important",
                "information",
                "next",
                "pooling",
                "neurons",
                "dimensionality",
                "widely",
                "apply"
            ]
        },
        {
            "id": "adv_368",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working of autoencoders in machine learning.",
            "expected_keywords": [
                "space",
                "introduce",
                "additional",
                "variants",
                "features",
                "consist",
                "essential",
                "minimize",
                "variational",
                "constraints",
                "main",
                "data",
                "include",
                "performance",
                "neural",
                "capturing",
                "noise",
                "two",
                "improve",
                "latent",
                "they",
                "type",
                "encoder",
                "like",
                "dimensional",
                "parts",
                "tasks",
                "maps",
                "trained",
                "anomaly",
                "unsupervised",
                "error",
                "detection",
                "most",
                "ensuring",
                "input",
                "reconstructs",
                "learning",
                "reduction",
                "used",
                "decoder",
                "network",
                "reconstruction",
                "lower",
                "important",
                "information",
                "autoencoders",
                "compression",
                "denoising",
                "vaes",
                "representation",
                "dimensionality",
                "captures"
            ]
        },
        {
            "id": "adv_369",
            "category": "ml",
            "difficulty": "expert",
            "question": "Explain the working of hyperparameter tuning in machine learning.",
            "expected_keywords": [
                "space",
                "combination",
                "randomly",
                "common",
                "new",
                "hyperparameter",
                "data",
                "during",
                "performance",
                "uses",
                "exhaustively",
                "distribution",
                "optimization",
                "searches",
                "improve",
                "samples",
                "predefined",
                "validation",
                "search",
                "generalization",
                "grid",
                "optimizing",
                "its",
                "parameters",
                "probabilistic",
                "set",
                "before",
                "values",
                "techniques",
                "maximize",
                "ensuring",
                "constant",
                "remain",
                "training",
                "tuning",
                "learning",
                "involves",
                "model",
                "efficiently",
                "machine",
                "s",
                "best",
                "bayesian",
                "helps",
                "better",
                "hyperparameters",
                "finding",
                "random",
                "include"
            ]
        },
        {
            "id": "adv_370",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working of ensemble methods in machine learning.",
            "expected_keywords": [
                "averages",
                "models",
                "errors",
                "combine",
                "each",
                "trains",
                "meta",
                "common",
                "bootstrapping",
                "data",
                "created",
                "forests",
                "previous",
                "focusing",
                "performance",
                "help",
                "various",
                "ensemble",
                "multiple",
                "improve",
                "them",
                "sequentially",
                "using",
                "reduce",
                "robustness",
                "generalization",
                "tasks",
                "combines",
                "bias",
                "making",
                "gradient",
                "predictions",
                "techniques",
                "boosting",
                "stacking",
                "examples",
                "overall",
                "bagging",
                "subsets",
                "model",
                "variance",
                "effective",
                "learning",
                "adaboost",
                "machine",
                "independently",
                "methods",
                "their",
                "random",
                "base",
                "different",
                "include"
            ]
        },
        {
            "id": "adv_371",
            "category": "ml",
            "difficulty": "advanced",
            "question": "Explain the working of RNN vs Transformer in machine learning.",
            "expected_keywords": [
                "sequences",
                "become",
                "gradients",
                "layers",
                "superior",
                "use",
                "consist",
                "transformers",
                "many",
                "attention",
                "data",
                "performance",
                "other",
                "neural",
                "rnns",
                "head",
                "vanishing",
                "they",
                "multi",
                "forward",
                "parallel",
                "feed",
                "dependencies",
                "sequential",
                "sequentially",
                "encoder",
                "them",
                "processing",
                "slower",
                "efficient",
                "connections",
                "architectures",
                "choice",
                "suffer",
                "tasks",
                "nlp",
                "faster",
                "temporal",
                "making",
                "allowing",
                "train",
                "input",
                "range",
                "self",
                "scalable",
                "training",
                "due",
                "flexibility",
                "recurrent",
                "decoder",
                "networks",
                "large",
                "preferred",
                "better",
                "their",
                "long",
                "but",
                "mechanisms",
                "both",
                "capture",
                "hand",
                "handling",
                "used",
                "datasets",
                "different",
                "more",
                "process"
            ]
        },
        {
            "id": "adv_372",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the probability of rolling a sum of 7 with two six-sided dice?",
            "expected_keywords": [
                "dice",
                "there",
                "possible",
                "sided",
                "outcomes",
                "two",
                "favorable",
                "probability",
                "six",
                "sum",
                "rolling"
            ]
        },
        {
            "id": "adv_373",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the expected value of a fair six-sided die roll?",
            "expected_keywords": [
                "fair",
                "sided",
                "value",
                "possible",
                "outcomes",
                "number",
                "roll",
                "die",
                "summing",
                "six",
                "dividing",
                "calculated",
                "expected"
            ]
        },
        {
            "id": "adv_374",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the derivative of f(x) = x^3 - 3x^2 + 2x - 5?",
            "expected_keywords": [
                "x",
                "derivative",
                "f"
            ]
        },
        {
            "id": "adv_375",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the integral of f(x) = 2x?",
            "expected_keywords": [
                "x",
                "where",
                "integration",
                "c",
                "constant",
                "f",
                "integral"
            ]
        },
        {
            "id": "adv_376",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the probability of drawing an ace from a standard deck of 52 cards?",
            "expected_keywords": [
                "deck",
                "aces",
                "there",
                "probability",
                "cards",
                "standard",
                "drawing",
                "ace"
            ]
        },
        {
            "id": "adv_377",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the Pythagorean theorem?",
            "expected_keywords": [
                "c",
                "sides",
                "angled",
                "other",
                "theorem",
                "where",
                "two",
                "equal",
                "expressed",
                "square",
                "lengths",
                "states",
                "length",
                "hypotenuse",
                "side",
                "right",
                "pythagorean",
                "opposite",
                "squares",
                "angle",
                "b",
                "triangle",
                "sum"
            ]
        },
        {
            "id": "adv_378",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the difference between a population and a sample in statistics?",
            "expected_keywords": [
                "statistics",
                "make",
                "inferences",
                "subset",
                "data",
                "sample",
                "analysis",
                "interested",
                "researcher",
                "whole",
                "items",
                "individuals",
                "population",
                "parameters",
                "studying",
                "representative",
                "based",
                "sampling",
                "selecting",
                "estimates",
                "entire",
                "selected",
                "characteristics",
                "group",
                "while",
                "those",
                "process"
            ]
        },
        {
            "id": "adv_379",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the central limit theorem?",
            "expected_keywords": [
                "approaches",
                "statistical",
                "statistics",
                "use",
                "when",
                "normal",
                "concept",
                "hypothesis",
                "sample",
                "theorem",
                "distribution",
                "regardless",
                "shape",
                "interval",
                "allows",
                "central",
                "key",
                "states",
                "parametric",
                "non",
                "confidence",
                "population",
                "even",
                "increases",
                "size",
                "limit",
                "testing",
                "sampling",
                "estimation",
                "methods",
                "fundamental",
                "mean"
            ]
        },
        {
            "id": "adv_380",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the difference between correlation and causation, (statistically speaking)?",
            "expected_keywords": [
                "evidence",
                "variables",
                "chance",
                "additional",
                "does",
                "implies",
                "design",
                "influences",
                "strength",
                "causation",
                "other",
                "occur",
                "requires",
                "directly",
                "two",
                "experimental",
                "relationship",
                "imply",
                "measures",
                "direction",
                "one",
                "causal",
                "correlation",
                "variable",
                "between",
                "due",
                "such",
                "establishing",
                "demonstrate",
                "third",
                "difference",
                "while"
            ]
        },
        {
            "id": "adv_381",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the difference between a one-tailed test and a two-tailed test in hypothesis testing?",
            "expected_keywords": [
                "investigated",
                "specific",
                "either",
                "does",
                "when",
                "focuses",
                "greater",
                "hypothesis",
                "being",
                "test",
                "predicts",
                "two",
                "less",
                "depends",
                "considers",
                "directions",
                "choice",
                "direction",
                "directionality",
                "one",
                "between",
                "testing",
                "specify",
                "tailed",
                "than",
                "both",
                "effect",
                "research",
                "used",
                "question",
                "while"
            ]
        },
        {
            "id": "adv_382",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the difference between a confidence interval and a prediction interval in statistics?",
            "expected_keywords": [
                "likely",
                "parameter",
                "variability",
                "data",
                "level",
                "sample",
                "interval",
                "individual",
                "plausible",
                "observation",
                "future",
                "confidence",
                "prediction",
                "population",
                "uncertainty",
                "provides",
                "values",
                "fall",
                "making",
                "predictions",
                "accounting",
                "based",
                "range",
                "specified",
                "intervals",
                "estimates",
                "wider",
                "than",
                "both",
                "used",
                "within"
            ]
        },
        {
            "id": "adv_383",
            "category": "ml",
            "difficulty": "advanced",
            "question": "What is the difference between a z-score and a t-score in statistics?",
            "expected_keywords": [
                "z",
                "small",
                "when",
                "unknown",
                "t",
                "data",
                "hypothesis",
                "sample",
                "estimated",
                "similar",
                "distribution",
                "interval",
                "known",
                "score",
                "measures",
                "point",
                "must",
                "confidence",
                "population",
                "scores",
                "standard",
                "standardized",
                "deviations",
                "testing",
                "number",
                "estimation",
                "deviation",
                "but",
                "mean",
                "sizes",
                "used",
                "working"
            ]
        },
        {
            "id": "adv_384",
            "category": "ml",
            "difficulty": "expert",
            "question": "What is the difference between a discrete and a continuous random variable in probability theory?",
            "expected_keywords": [
                "variables",
                "assigns",
                "distinction",
                "each",
                "numbers",
                "affects",
                "discrete",
                "infinite",
                "continuous",
                "mass",
                "possible",
                "value",
                "theory",
                "density",
                "calculation",
                "integers",
                "characterized",
                "whole",
                "take",
                "probabilities",
                "variable",
                "distinct",
                "values",
                "function",
                "expectations",
                "range",
                "countable",
                "between",
                "such",
                "number",
                "probability",
                "random",
                "within"
            ]
        }
    ]
}